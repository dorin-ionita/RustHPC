% Generated by ADiMat 0.6.6-5530 (00419e1f)
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2018 Johannes Willkomm <johannes@johannes-willkomm.de>
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to johannes@johannes-willkomm.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Parameters:
%  - dependents=psi
%  - independents=x, y, t
%  - inputEncoding=ISO-8859-1
%
% Functions in this file: a_ad_test, rec_ad_test,
%  ret_ad_test
%

function [a_x a_y a_t nr_psi] = a_ad_test(x, y, t, a_psi)
%AD_TEST Summary of this function goes here
%   Detailed explanation goes here
   freq = 100;
   A = 1;
   k_x = 2;
   k_y = 3;
   phi = -1;
   tmpca5 = 2 * pi * freq * t;
   tmpca4 = k_x * y;
   tmpca3 = k_x * x;
   tmpca2 = tmpca3 + tmpca4 + tmpca5 + phi;
   tmpca1 = sin(tmpca2);
   psi = A * tmpca1;
   nr_psi = psi;
   [a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_tmpca5 a_x a_y a_t] = a_zeros(tmpca1, tmpca2, tmpca3, tmpca4, tmpca5, x, y, t);
   if nargin < 4
      a_psi = a_zeros1(psi);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, A, a_psi));
   a_tmpca2 = adimat_adjsum(a_tmpca2, cos(tmpca2) .* a_tmpca1);
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, a_tmpca2));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, a_tmpca2));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, a_tmpca2));
   a_x = adimat_adjsum(a_x, adimat_adjmultr(x, k_x, a_tmpca3));
   a_y = adimat_adjsum(a_y, adimat_adjmultr(y, k_x, a_tmpca4));
   a_t = adimat_adjsum(a_t, adimat_adjmultr(t, 2 * pi * freq, a_tmpca5));
end

function psi = rec_ad_test(x, y, t)
   freq = 100;
   A = 1;
   k_x = 2;
   k_y = 3;
   phi = -1;
   tmpca5 = 2 * pi * freq * t;
   tmpca4 = k_x * y;
   tmpca3 = k_x * x;
   tmpca2 = tmpca3 + tmpca4 + tmpca5 + phi;
   tmpca1 = sin(tmpca2);
   psi = A * tmpca1;
   adimat_push(freq, A, k_x, k_y, phi, tmpca1, tmpca2, tmpca3, tmpca4, tmpca5, psi, x, y, t);
end

function [a_x a_y a_t] = ret_ad_test(a_psi)
   [t y x psi tmpca5 tmpca4 tmpca3 tmpca2 tmpca1 phi k_y k_x A freq] = adimat_pop;
   [a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_tmpca5 a_x a_y a_t] = a_zeros(tmpca1, tmpca2, tmpca3, tmpca4, tmpca5, x, y, t);
   if nargin < 1
      a_psi = a_zeros1(psi);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, A, a_psi));
   a_tmpca2 = adimat_adjsum(a_tmpca2, cos(tmpca2) .* a_tmpca1);
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, a_tmpca2));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, a_tmpca2));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, a_tmpca2));
   a_x = adimat_adjsum(a_x, adimat_adjmultr(x, k_x, a_tmpca3));
   a_y = adimat_adjsum(a_y, adimat_adjmultr(y, k_x, a_tmpca4));
   a_t = adimat_adjsum(a_t, adimat_adjmultr(t, 2 * pi * freq, a_tmpca5));
end

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module big_mult_v3small (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V,
        b_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 24'b1;
parameter    ap_ST_fsm_state2 = 24'b10;
parameter    ap_ST_fsm_state3 = 24'b100;
parameter    ap_ST_fsm_state4 = 24'b1000;
parameter    ap_ST_fsm_state5 = 24'b10000;
parameter    ap_ST_fsm_state6 = 24'b100000;
parameter    ap_ST_fsm_state7 = 24'b1000000;
parameter    ap_ST_fsm_state8 = 24'b10000000;
parameter    ap_ST_fsm_state9 = 24'b100000000;
parameter    ap_ST_fsm_state10 = 24'b1000000000;
parameter    ap_ST_fsm_state11 = 24'b10000000000;
parameter    ap_ST_fsm_state12 = 24'b100000000000;
parameter    ap_ST_fsm_state13 = 24'b1000000000000;
parameter    ap_ST_fsm_state14 = 24'b10000000000000;
parameter    ap_ST_fsm_state15 = 24'b100000000000000;
parameter    ap_ST_fsm_state16 = 24'b1000000000000000;
parameter    ap_ST_fsm_state17 = 24'b10000000000000000;
parameter    ap_ST_fsm_state18 = 24'b100000000000000000;
parameter    ap_ST_fsm_state19 = 24'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 24'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 24'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 24'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 24'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 24'b100000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_7 = 64'b111;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_7 = 4'b111;
parameter    ap_const_lv7_10 = 7'b10000;
parameter    ap_const_lv7_7C = 7'b1111100;
parameter    ap_const_lv32_7C = 32'b1111100;
parameter    ap_const_lv125_1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF = 125'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_45 = 32'b1000101;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv7_6F = 7'b1101111;
parameter    ap_const_lv8_B1 = 8'b10110001;
parameter    ap_const_lv32_B1 = 32'b10110001;
parameter    ap_const_lv178_lc_1 = 178'b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_77 = 32'b1110111;
parameter    ap_const_lv178_lc_2 = 178'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [124:0] a_V;
input  [52:0] b_V;
output  [177:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[177:0] ap_return;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [69:0] tmp_fu_209_p1;
reg   [69:0] tmp_reg_591;
wire   [3:0] i_9_fu_219_p2;
reg   [3:0] i_9_reg_599;
wire   [0:0] ap_CS_fsm_state2;
wire   [6:0] Lo_assign_fu_235_p3;
reg   [6:0] Lo_assign_reg_604;
wire   [0:0] exitcond1_fu_213_p2;
wire   [6:0] Ui_fu_249_p3;
reg   [6:0] Ui_reg_613;
wire  signed [69:0] tmp_335_fu_337_p1;
reg  signed [69:0] tmp_335_reg_625;
wire   [0:0] ap_CS_fsm_state3;
wire   [63:0] tmp_176_fu_357_p1;
reg   [63:0] tmp_176_reg_633;
wire   [0:0] ap_CS_fsm_state20;
wire   [0:0] exitcond2_fu_351_p2;
wire   [3:0] i_10_fu_373_p2;
reg   [3:0] i_10_reg_648;
wire   [2:0] tmp_181_fu_406_p2;
reg   [2:0] tmp_181_reg_656;
wire   [0:0] ap_CS_fsm_state22;
wire   [0:0] exitcond_fu_400_p2;
wire   [177:0] p_Result_14_fu_563_p2;
wire   [0:0] ap_CS_fsm_state23;
reg   [2:0] pp_V_address0;
reg    pp_V_ce0;
reg    pp_V_we0;
wire   [69:0] pp_V_q0;
reg   [2:0] pps_V_address0;
reg    pps_V_ce0;
reg    pps_V_we0;
reg   [69:0] pps_V_d0;
wire   [69:0] pps_V_q0;
reg   [3:0] i_reg_162;
wire   [0:0] ap_CS_fsm_state18;
reg   [3:0] i_1_reg_174;
wire   [0:0] ap_CS_fsm_state19;
wire   [0:0] ap_CS_fsm_state21;
reg   [177:0] p_Val2_s_reg_185;
reg   [2:0] i_2_reg_197;
wire   [63:0] tmp_173_fu_346_p1;
wire   [63:0] tmp_178_fu_368_p1;
wire   [63:0] tmp_180_fu_412_p1;
wire   [69:0] grp_fu_341_p2;
wire   [69:0] tmp_179_fu_393_p2;
wire   [2:0] tmp_320_fu_231_p1;
wire   [0:0] tmp_s_fu_225_p2;
wire   [6:0] tmp_172_fu_243_p2;
wire   [0:0] tmp_321_fu_257_p2;
wire   [6:0] tmp_323_fu_270_p2;
wire   [6:0] tmp_325_fu_279_p2;
reg   [124:0] tmp_322_fu_261_p4;
wire   [6:0] tmp_324_fu_274_p2;
wire   [6:0] tmp_326_fu_283_p3;
wire   [6:0] tmp_328_fu_298_p3;
wire   [6:0] tmp_329_fu_305_p2;
wire   [124:0] tmp_327_fu_291_p3;
wire   [124:0] tmp_330_fu_311_p1;
wire   [124:0] tmp_331_fu_315_p1;
wire   [124:0] tmp_332_fu_319_p2;
wire   [124:0] tmp_333_fu_325_p2;
wire   [124:0] p_Result_15_fu_331_p2;
wire   [52:0] grp_fu_341_p0;
wire   [0:0] ap_CS_fsm_state4;
wire   [3:0] tmp_177_fu_362_p2;
wire   [52:0] r_V_fu_379_p4;
wire   [69:0] r_V_7_fu_389_p1;
wire   [6:0] Li_fu_417_p4;
wire   [16:0] tmp_337_fu_433_p1;
wire   [6:0] Ui_1_fu_427_p2;
wire   [7:0] tmp_339_fu_447_p1;
wire   [0:0] tmp_338_fu_441_p2;
wire   [7:0] tmp_340_fu_451_p1;
wire   [7:0] tmp_341_fu_455_p2;
wire   [7:0] tmp_342_fu_461_p3;
wire   [7:0] tmp_344_fu_477_p3;
wire   [7:0] tmp_343_fu_469_p3;
wire   [7:0] tmp_345_fu_485_p2;
wire   [177:0] loc_V_fu_437_p1;
wire   [177:0] tmp_346_fu_491_p1;
wire   [177:0] tmp_349_fu_503_p2;
reg   [177:0] tmp_350_fu_509_p4;
wire   [177:0] tmp_347_fu_495_p1;
wire   [177:0] tmp_348_fu_499_p1;
wire   [177:0] tmp_352_fu_527_p2;
wire   [177:0] tmp_353_fu_533_p2;
wire   [177:0] p_demorgan_fu_539_p2;
wire   [177:0] tmp_354_fu_545_p2;
wire   [177:0] tmp_351_fu_519_p3;
wire   [177:0] tmp_355_fu_551_p2;
wire   [177:0] tmp_356_fu_557_p2;
wire   [0:0] ap_CS_fsm_state24;
wire   [58:0] tmp_336_fu_569_p1;
wire   [177:0] p_Result_s_fu_573_p5;
reg   [177:0] ap_return_preg;
reg   [23:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'b1;
#0 ap_return_preg = 178'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
end

big_mult_v3small_bkb #(
    .DataWidth( 70 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
pp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pp_V_address0),
    .ce0(pp_V_ce0),
    .we0(pp_V_we0),
    .d0(grp_fu_341_p2),
    .q0(pp_V_q0)
);

big_mult_v3small_bkb #(
    .DataWidth( 70 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
pps_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pps_V_address0),
    .ce0(pps_V_ce0),
    .we0(pps_V_we0),
    .d0(pps_V_d0),
    .q0(pps_V_q0)
);

s_compute_acoustidEe #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 53 ),
    .din1_WIDTH( 70 ),
    .dout_WIDTH( 70 ))
s_compute_acoustidEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_341_p0),
    .din1(tmp_335_reg_625),
    .ce(1'b1),
    .dout(grp_fu_341_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv178_lc_2;
    end else begin
        if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_return_preg <= p_Result_s_fu_573_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_1_reg_174 <= i_10_reg_648;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        i_1_reg_174 <= ap_const_lv4_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & ~(1'b0 == exitcond2_fu_351_p2))) begin
        i_2_reg_197 <= ap_const_lv3_0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        i_2_reg_197 <= tmp_181_reg_656;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_162 <= ap_const_lv4_0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i_reg_162 <= i_9_reg_599;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_213_p2 == 1'b0))) begin
        Lo_assign_reg_604 <= Lo_assign_fu_235_p3;
        Ui_reg_613 <= Ui_fu_249_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'b0 == exitcond2_fu_351_p2))) begin
        i_10_reg_648 <= i_10_fu_373_p2;
        tmp_176_reg_633[3 : 0] <= tmp_176_fu_357_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_9_reg_599 <= i_9_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        p_Val2_s_reg_185 <= p_Result_14_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_181_reg_656 <= tmp_181_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_335_reg_625 <= tmp_335_fu_337_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_reg_591[52 : 0] <= tmp_fu_209_p1[52 : 0];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | (1'b1 == ap_CS_fsm_state24))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ap_return = p_Result_s_fu_573_p5;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        pp_V_address0 = tmp_176_fu_357_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        pp_V_address0 = tmp_173_fu_346_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pp_V_address0 = ap_const_lv64_0;
    end else begin
        pp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18))) begin
        pp_V_ce0 = 1'b1;
    end else begin
        pp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        pp_V_we0 = 1'b1;
    end else begin
        pp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == exitcond_fu_400_p2))) begin
        pps_V_address0 = ap_const_lv64_7;
    end else if (((1'b1 == ap_CS_fsm_state22) & (1'b0 == exitcond_fu_400_p2))) begin
        pps_V_address0 = tmp_180_fu_412_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        pps_V_address0 = tmp_176_reg_633;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        pps_V_address0 = tmp_178_fu_368_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        pps_V_address0 = ap_const_lv64_0;
    end else begin
        pps_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((1'b1 == ap_CS_fsm_state22) & (1'b0 == exitcond_fu_400_p2)) | ((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == exitcond_fu_400_p2)) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21))) begin
        pps_V_ce0 = 1'b1;
    end else begin
        pps_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        pps_V_d0 = tmp_179_fu_393_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        pps_V_d0 = pp_V_q0;
    end else begin
        pps_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21))) begin
        pps_V_we0 = 1'b1;
    end else begin
        pps_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(exitcond1_fu_213_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (~(1'b0 == exitcond2_fu_351_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state22 : begin
            if (~(1'b0 == exitcond_fu_400_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Li_fu_417_p4 = {{{i_2_reg_197}, {1'b0}}, {i_2_reg_197}};

assign Lo_assign_fu_235_p3 = {{tmp_320_fu_231_p1}, {i_reg_162}};

assign Ui_1_fu_427_p2 = (ap_const_lv7_10 + Li_fu_417_p4);

assign Ui_fu_249_p3 = ((tmp_s_fu_225_p2[0:0] === 1'b1) ? ap_const_lv7_7C : tmp_172_fu_243_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign exitcond1_fu_213_p2 = ((i_reg_162 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond2_fu_351_p2 = ((i_1_reg_174 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond_fu_400_p2 = ((i_2_reg_197 == ap_const_lv3_7) ? 1'b1 : 1'b0);

assign grp_fu_341_p0 = tmp_reg_591;

assign i_10_fu_373_p2 = (i_1_reg_174 + ap_const_lv4_1);

assign i_9_fu_219_p2 = (i_reg_162 + ap_const_lv4_1);

assign loc_V_fu_437_p1 = tmp_337_fu_433_p1;

assign p_Result_14_fu_563_p2 = (tmp_355_fu_551_p2 | tmp_356_fu_557_p2);

assign p_Result_15_fu_331_p2 = (tmp_332_fu_319_p2 & tmp_333_fu_325_p2);

assign p_Result_s_fu_573_p5 = {{tmp_336_fu_569_p1}, {p_Val2_s_reg_185[32'd118 : 32'd0]}};

assign p_demorgan_fu_539_p2 = (tmp_352_fu_527_p2 & tmp_353_fu_533_p2);

assign r_V_7_fu_389_p1 = r_V_fu_379_p4;

assign r_V_fu_379_p4 = {{pps_V_q0[ap_const_lv32_45 : ap_const_lv32_11]}};

assign tmp_172_fu_243_p2 = (ap_const_lv7_10 + Lo_assign_fu_235_p3);

assign tmp_173_fu_346_p1 = i_reg_162;

assign tmp_176_fu_357_p1 = i_1_reg_174;

assign tmp_177_fu_362_p2 = ($signed(i_1_reg_174) + $signed(ap_const_lv4_F));

assign tmp_178_fu_368_p1 = tmp_177_fu_362_p2;

assign tmp_179_fu_393_p2 = (pp_V_q0 + r_V_7_fu_389_p1);

assign tmp_180_fu_412_p1 = i_2_reg_197;

assign tmp_181_fu_406_p2 = (i_2_reg_197 + ap_const_lv3_1);

assign tmp_320_fu_231_p1 = i_reg_162[2:0];

assign tmp_321_fu_257_p2 = ((Lo_assign_reg_604 > Ui_reg_613) ? 1'b1 : 1'b0);

integer ap_tvar_int_0;

always @ (a_V) begin
    for (ap_tvar_int_0 = 125 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > ap_const_lv32_7C - ap_const_lv32_0) begin
            tmp_322_fu_261_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_322_fu_261_p4[ap_tvar_int_0] = a_V[ap_const_lv32_7C - ap_tvar_int_0];
        end
    end
end

assign tmp_323_fu_270_p2 = (Lo_assign_reg_604 - Ui_reg_613);

assign tmp_324_fu_274_p2 = ($signed(ap_const_lv7_7C) - $signed(Lo_assign_reg_604));

assign tmp_325_fu_279_p2 = (Ui_reg_613 - Lo_assign_reg_604);

assign tmp_326_fu_283_p3 = ((tmp_321_fu_257_p2[0:0] === 1'b1) ? tmp_323_fu_270_p2 : tmp_325_fu_279_p2);

assign tmp_327_fu_291_p3 = ((tmp_321_fu_257_p2[0:0] === 1'b1) ? tmp_322_fu_261_p4 : a_V);

assign tmp_328_fu_298_p3 = ((tmp_321_fu_257_p2[0:0] === 1'b1) ? tmp_324_fu_274_p2 : Lo_assign_reg_604);

assign tmp_329_fu_305_p2 = ($signed(ap_const_lv7_7C) - $signed(tmp_326_fu_283_p3));

assign tmp_330_fu_311_p1 = tmp_328_fu_298_p3;

assign tmp_331_fu_315_p1 = tmp_329_fu_305_p2;

assign tmp_332_fu_319_p2 = tmp_327_fu_291_p3 >> tmp_330_fu_311_p1;

assign tmp_333_fu_325_p2 = ap_const_lv125_1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >> tmp_331_fu_315_p1;

assign tmp_335_fu_337_p1 = p_Result_15_fu_331_p2[69:0];

assign tmp_336_fu_569_p1 = pps_V_q0[58:0];

assign tmp_337_fu_433_p1 = pps_V_q0[16:0];

assign tmp_338_fu_441_p2 = ((Li_fu_417_p4 > ap_const_lv7_6F) ? 1'b1 : 1'b0);

assign tmp_339_fu_447_p1 = Li_fu_417_p4;

assign tmp_340_fu_451_p1 = Ui_1_fu_427_p2;

assign tmp_341_fu_455_p2 = ($signed(ap_const_lv8_B1) - $signed(tmp_339_fu_447_p1));

assign tmp_342_fu_461_p3 = ((tmp_338_fu_441_p2[0:0] === 1'b1) ? tmp_339_fu_447_p1 : tmp_340_fu_451_p1);

assign tmp_343_fu_469_p3 = ((tmp_338_fu_441_p2[0:0] === 1'b1) ? tmp_340_fu_451_p1 : tmp_339_fu_447_p1);

assign tmp_344_fu_477_p3 = ((tmp_338_fu_441_p2[0:0] === 1'b1) ? tmp_341_fu_455_p2 : tmp_339_fu_447_p1);

assign tmp_345_fu_485_p2 = ($signed(ap_const_lv8_B1) - $signed(tmp_342_fu_461_p3));

assign tmp_346_fu_491_p1 = tmp_344_fu_477_p3;

assign tmp_347_fu_495_p1 = tmp_343_fu_469_p3;

assign tmp_348_fu_499_p1 = tmp_345_fu_485_p2;

assign tmp_349_fu_503_p2 = loc_V_fu_437_p1 << tmp_346_fu_491_p1;

integer ap_tvar_int_1;

always @ (tmp_349_fu_503_p2) begin
    for (ap_tvar_int_1 = 178 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > ap_const_lv32_B1 - ap_const_lv32_0) begin
            tmp_350_fu_509_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_350_fu_509_p4[ap_tvar_int_1] = tmp_349_fu_503_p2[ap_const_lv32_B1 - ap_tvar_int_1];
        end
    end
end

assign tmp_351_fu_519_p3 = ((tmp_338_fu_441_p2[0:0] === 1'b1) ? tmp_350_fu_509_p4 : tmp_349_fu_503_p2);

assign tmp_352_fu_527_p2 = ap_const_lv178_lc_1 << tmp_347_fu_495_p1;

assign tmp_353_fu_533_p2 = ap_const_lv178_lc_1 >> tmp_348_fu_499_p1;

assign tmp_354_fu_545_p2 = (p_demorgan_fu_539_p2 ^ ap_const_lv178_lc_1);

assign tmp_355_fu_551_p2 = (p_Val2_s_reg_185 & tmp_354_fu_545_p2);

assign tmp_356_fu_557_p2 = (tmp_351_fu_519_p3 & p_demorgan_fu_539_p2);

assign tmp_fu_209_p1 = b_V;

assign tmp_s_fu_225_p2 = ((i_reg_162 == ap_const_lv4_7) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_reg_591[69:53] <= 17'b00000000000000000;
    tmp_176_reg_633[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //big_mult_v3small

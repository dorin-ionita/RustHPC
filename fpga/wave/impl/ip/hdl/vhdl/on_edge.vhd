-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity on_edge is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    y : IN STD_LOGIC_VECTOR (31 downto 0);
    nx : IN STD_LOGIC_VECTOR (31 downto 0);
    ny : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of on_edge is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp20_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp20_reg_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_159_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_159_reg_209 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_214 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_demorgan_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_demorgan_reg_224 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_38_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_44_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_152_fu_60_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_154_fu_76_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_157_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_158_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_156_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_153_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp22_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_155_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_50_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal or_cond5_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_164_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp8_fu_172_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp3_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_179_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                sel_tmp11_demorgan_reg_224 <= sel_tmp11_demorgan_fu_154_p2;
                sel_tmp7_reg_219 <= sel_tmp7_fu_148_p2;
                sel_tmp_reg_214 <= sel_tmp_fu_130_p2;
                tmp20_reg_204 <= tmp20_fu_106_p2;
                tmp_159_reg_209 <= tmp_159_fu_118_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv3_3 when (sel_tmp4_fu_191_p2(0) = '1') else 
        sel_tmp1_fu_179_p3;
    or_cond4_fu_112_p2 <= (tmp20_fu_106_p2 or tmp_156_fu_88_p2);
    or_cond5_fu_160_p2 <= (tmp20_reg_204 or tmp_159_reg_209);
    or_cond_fu_50_p2 <= (tmp_fu_38_p2 or tmp_s_fu_44_p2);
    p_s_fu_164_p3 <= 
        ap_const_lv3_0 when (or_cond5_fu_160_p2(0) = '1') else 
        ap_const_lv3_4;
    sel_tmp11_demorgan_fu_154_p2 <= (or_cond_fu_50_p2 or tmp_153_fu_66_p2);
    sel_tmp1_fu_179_p3 <= 
        sel_tmp8_fu_172_p3 when (sel_tmp11_demorgan_reg_224(0) = '1') else 
        ap_const_lv3_1;
    sel_tmp2_fu_136_p2 <= (or_cond_fu_50_p2 and sel_tmp_fu_130_p2);
    sel_tmp3_fu_186_p2 <= (sel_tmp_reg_214 xor ap_const_lv1_1);
    sel_tmp4_fu_191_p2 <= (sel_tmp11_demorgan_reg_224 and sel_tmp3_fu_186_p2);
    sel_tmp6_fu_142_p2 <= (sel_tmp2_fu_136_p2 or tmp_153_fu_66_p2);
    sel_tmp7_fu_148_p2 <= (sel_tmp6_fu_142_p2 and or_cond4_fu_112_p2);
    sel_tmp8_fu_172_p3 <= 
        p_s_fu_164_p3 when (sel_tmp7_reg_219(0) = '1') else 
        ap_const_lv3_2;
    sel_tmp_fu_130_p2 <= (tmp22_fu_124_p2 or tmp_155_fu_82_p2);
    tmp20_fu_106_p2 <= (tmp_157_fu_94_p2 or tmp_158_fu_100_p2);
    tmp22_fu_124_p2 <= (tmp_s_fu_44_p2 or tmp_153_fu_66_p2);
    tmp_152_fu_60_p2 <= std_logic_vector(unsigned(nx) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_153_fu_66_p2 <= "1" when (tmp_152_fu_60_p2 = y) else "0";
    tmp_154_fu_76_p2 <= std_logic_vector(unsigned(ny) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_155_fu_82_p2 <= "0" when (tmp_154_fu_76_p2 = x) else "1";
    tmp_156_fu_88_p2 <= "0" when (y = ap_const_lv32_0) else "1";
    tmp_157_fu_94_p2 <= "1" when (x = ap_const_lv32_0) else "0";
    tmp_158_fu_100_p2 <= "1" when (tmp_154_fu_76_p2 = x) else "0";
    tmp_159_fu_118_p2 <= "0" when (tmp_152_fu_60_p2 = y) else "1";
    tmp_fu_38_p2 <= "0" when (x = ap_const_lv32_0) else "1";
    tmp_s_fu_44_p2 <= "1" when (y = ap_const_lv32_0) else "0";
end behav;

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pulse_source is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    radius : IN STD_LOGIC_VECTOR (31 downto 0);
    step : IN STD_LOGIC_VECTOR (31 downto 0);
    amp : IN STD_LOGIC_VECTOR (63 downto 0);
    uc_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    uc_ce0 : OUT STD_LOGIC;
    uc_we0 : OUT STD_LOGIC;
    uc_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ny : IN STD_LOGIC_VECTOR (31 downto 0);
    nx : IN STD_LOGIC_VECTOR (31 downto 0);
    scenario_source_x : IN STD_LOGIC_VECTOR (31 downto 0);
    scenario_source_y : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of pulse_source is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (75 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (75 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (75 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (75 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (75 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (75 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (75 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (75 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (75 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (75 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_400921FB54442D18 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000001001001000011111101101010100010001000010110100011000";
    constant ap_const_lv64_3FD0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_64 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_159 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_132_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_165 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_193_i_to_int_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_193_i_to_int_reg_363 : STD_LOGIC_VECTOR (63 downto 0);
    signal notrhs2_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs2_reg_368 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_316_fu_185_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_316_reg_373 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal next_mul_fu_189_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_mul_reg_378 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_i_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_129_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_reg_409 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_186_i_reg_414 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_189_i_reg_420 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_187_i_reg_426 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_138_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_190_i_reg_431 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_128_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_191_i_reg_436 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_192_i_reg_441 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal tmp_182_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_182_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal tmp_252_fu_319_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_252_reg_451 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_318_fu_328_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_318_reg_456 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal grp_sin_cos_range_redux_s_fu_119_ap_done : STD_LOGIC;
    signal ret_i_i_i_i_i_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal tmp_130_reg_466 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal grp_sin_cos_range_redux_s_fu_119_ap_start : STD_LOGIC;
    signal grp_sin_cos_range_redux_s_fu_119_ap_idle : STD_LOGIC;
    signal grp_sin_cos_range_redux_s_fu_119_ap_ready : STD_LOGIC;
    signal grp_sin_cos_range_redux_s_fu_119_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_96 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_assign_reg_107 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal tmp_127_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_grp_sin_cos_range_redux_s_fu_119_ap_start : STD_LOGIC := '0';
    signal tmp_253_cast_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_132_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_146_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_151_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_315_fu_175_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_177_fu_249_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_192_i_to_int_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_175_fu_267_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_317_fu_277_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_178_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_179_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_180_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_181_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_319_fu_315_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_s_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_332_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (75 downto 0);

    component sin_cos_range_redux_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component s_compute_acoustijbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component s_compute_acoustikbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component s_compute_acoustilbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component s_compute_acoustimb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component s_compute_acoustincg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_sin_cos_range_redux_s_fu_119 : component sin_cos_range_redux_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_cos_range_redux_s_fu_119_ap_start,
        ap_done => grp_sin_cos_range_redux_s_fu_119_ap_done,
        ap_idle => grp_sin_cos_range_redux_s_fu_119_ap_idle,
        ap_ready => grp_sin_cos_range_redux_s_fu_119_ap_ready,
        t_in => reg_165,
        ap_return => grp_sin_cos_range_redux_s_fu_119_ap_return);

    s_compute_acoustijbC_U12 : component s_compute_acoustijbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_187_i_reg_426,
        din1 => tmp_190_i_reg_431,
        ce => ap_const_logic_1,
        dout => grp_fu_128_p2);

    s_compute_acoustikbM_U13 : component s_compute_acoustikbM
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_132_p0,
        din1 => grp_fu_132_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_132_p2);

    s_compute_acoustikbM_U14 : component s_compute_acoustikbM
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_189_i_reg_420,
        din1 => tmp_189_i_reg_420,
        ce => ap_const_logic_1,
        dout => grp_fu_138_p2);

    s_compute_acoustilbW_U15 : component s_compute_acoustilbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_192_i_reg_441,
        din1 => reg_159,
        opcode => ap_const_lv5_5,
        dout => tmp_181_fu_142_p2);

    s_compute_acoustimb6_U16 : component s_compute_acoustimb6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_146_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_146_p1);

    s_compute_acoustimb6_U17 : component s_compute_acoustimb6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_151_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_151_p1);

    s_compute_acoustincg_U18 : component s_compute_acoustincg
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => tmp_191_i_reg_436,
        ce => ap_const_logic_1,
        dout => grp_fu_154_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_sin_cos_range_redux_s_fu_119_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_sin_cos_range_redux_s_fu_119_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state68) and not((ap_const_lv1_0 = tmp_182_fu_309_p2)))) then 
                    ap_reg_grp_sin_cos_range_redux_s_fu_119_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sin_cos_range_redux_s_fu_119_ap_ready)) then 
                    ap_reg_grp_sin_cos_range_redux_s_fu_119_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    phi_mul_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20) and (tmp_129_fu_215_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_96 <= next_mul_reg_378;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
                phi_mul_reg_96 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    x_assign_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20) and (tmp_129_fu_215_p2 = ap_const_lv1_0))) then 
                x_assign_reg_84 <= i_reg_386;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
                x_assign_reg_84 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_assign_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19) and not((ap_const_lv1_0 = tmp_127_fu_199_p2)))) then 
                y_assign_reg_107 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state76))) then 
                y_assign_reg_107 <= j_reg_394;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then
                i_reg_386 <= i_fu_205_p2;
                next_mul_reg_378 <= next_mul_fu_189_p2;
                tmp_316_reg_373 <= tmp_316_fu_185_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then
                j_reg_394 <= j_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20) and not((tmp_129_fu_215_p2 = ap_const_lv1_0)))) then
                notlhs1_reg_409 <= notlhs1_fu_258_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state18))) then
                notrhs2_reg_368 <= notrhs2_fu_179_p2;
                tmp_193_i_to_int_reg_363 <= tmp_193_i_to_int_fu_171_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)))) then
                reg_159 <= grp_fu_146_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)))) then
                reg_165 <= grp_fu_132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state75))) then
                tmp_130_reg_466 <= grp_fu_132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state68))) then
                tmp_182_reg_447 <= tmp_182_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then
                tmp_186_i_reg_414 <= grp_fu_146_p1;
                tmp_189_i_reg_420 <= grp_fu_151_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state31))) then
                tmp_187_i_reg_426 <= grp_fu_132_p2;
                tmp_190_i_reg_431 <= grp_fu_138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state36))) then
                tmp_191_i_reg_436 <= grp_fu_128_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state67))) then
                tmp_192_i_reg_441 <= grp_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state68) and not((ap_const_lv1_0 = tmp_182_fu_309_p2)))) then
                tmp_252_reg_451 <= tmp_252_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state69) and not((ap_const_logic_0 = grp_sin_cos_range_redux_s_fu_119_ap_done)))) then
                tmp_318_reg_456 <= tmp_318_fu_328_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_129_fu_215_p2, tmp_182_fu_309_p2, grp_sin_cos_range_redux_s_fu_119_ap_done, tmp_127_fu_199_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if ((ap_const_lv1_0 = tmp_127_fu_199_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if ((tmp_129_fu_215_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if ((ap_const_lv1_0 = tmp_182_fu_309_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state69 => 
                if (not((ap_const_logic_0 = grp_sin_cos_range_redux_s_fu_119_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state31 <= ap_CS_fsm(30 downto 30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31 downto 31);
    ap_CS_fsm_state36 <= ap_CS_fsm(35 downto 35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36 downto 36);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state67 <= ap_CS_fsm(66 downto 66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67 downto 67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68 downto 68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69 downto 69);
    ap_CS_fsm_state75 <= ap_CS_fsm(74 downto 74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75 downto 75);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19, tmp_127_fu_199_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = tmp_127_fu_199_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, tmp_127_fu_199_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = tmp_127_fu_199_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_132_p0_assign_proc : process(reg_159, reg_165, tmp_186_i_reg_414, ret_i_i_i_i_i_fu_339_p1, ap_CS_fsm_state70, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state26)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state70))) then 
            grp_fu_132_p0 <= ret_i_i_i_i_i_fu_339_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
            grp_fu_132_p0 <= tmp_186_i_reg_414;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            grp_fu_132_p0 <= reg_165;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            grp_fu_132_p0 <= reg_159;
        else 
            grp_fu_132_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_132_p1_assign_proc : process(amp, tmp_186_i_reg_414, ap_CS_fsm_state70, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state26)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state70))) then 
            grp_fu_132_p1 <= amp;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
            grp_fu_132_p1 <= tmp_186_i_reg_414;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            grp_fu_132_p1 <= ap_const_lv64_3FD0000000000000;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            grp_fu_132_p1 <= ap_const_lv64_400921FB54442D18;
        else 
            grp_fu_132_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_146_p0_assign_proc : process(ap_CS_fsm_state1, radius, step, ap_CS_fsm_state12, ap_CS_fsm_state20, tmp_i_fu_231_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            grp_fu_146_p0 <= tmp_i_fu_231_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            grp_fu_146_p0 <= radius;
        elsif (((ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            grp_fu_146_p0 <= step;
        else 
            grp_fu_146_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_151_p0 <= std_logic_vector(unsigned(scenario_source_y) - unsigned(y_assign_reg_107));
    grp_sin_cos_range_redux_s_fu_119_ap_start <= ap_reg_grp_sin_cos_range_redux_s_fu_119_ap_start;
    i_fu_205_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(x_assign_reg_84));
    j_fu_221_p2 <= std_logic_vector(unsigned(y_assign_reg_107) + unsigned(ap_const_lv32_1));
    next_mul_fu_189_p2 <= std_logic_vector(unsigned(ap_const_lv64_64) + unsigned(phi_mul_reg_96));
    notlhs1_fu_258_p2 <= "0" when (tmp_177_fu_249_p4 = ap_const_lv11_7FF) else "1";
    notlhs_fu_281_p2 <= "0" when (tmp_175_fu_267_p4 = ap_const_lv11_7FF) else "1";
    notrhs2_fu_179_p2 <= "1" when (tmp_315_fu_175_p1 = ap_const_lv52_0) else "0";
    notrhs_fu_287_p2 <= "1" when (tmp_317_fu_277_p1 = ap_const_lv52_0) else "0";
    p_Result_s_fu_332_p3 <= (ap_const_lv1_0 & tmp_318_reg_456);
    p_Val2_s_fu_324_p1 <= grp_sin_cos_range_redux_s_fu_119_ap_return;
    ret_i_i_i_i_i_fu_339_p1 <= p_Result_s_fu_332_p3;
    tmp_127_fu_199_p2 <= "1" when (signed(x_assign_reg_84) < signed(ny)) else "0";
    tmp_129_fu_215_p2 <= "1" when (signed(y_assign_reg_107) < signed(nx)) else "0";
    tmp_175_fu_267_p4 <= tmp_192_i_to_int_fu_264_p1(62 downto 52);
    tmp_177_fu_249_p4 <= tmp_193_i_to_int_reg_363(62 downto 52);
    tmp_178_fu_293_p2 <= (notrhs_fu_287_p2 or notlhs_fu_281_p2);
    tmp_179_fu_299_p2 <= (notrhs2_reg_368 or notlhs1_reg_409);
    tmp_180_fu_303_p2 <= (tmp_178_fu_293_p2 and tmp_179_fu_299_p2);
    tmp_182_fu_309_p2 <= (tmp_180_fu_303_p2 and tmp_181_fu_142_p2);
    tmp_192_i_to_int_fu_264_p1 <= tmp_192_i_reg_441;
    tmp_193_i_to_int_fu_171_p1 <= reg_159;
    tmp_252_fu_319_p2 <= std_logic_vector(unsigned(tmp_316_reg_373) + unsigned(tmp_319_fu_315_p1));
    tmp_253_cast_fu_344_p1 <= std_logic_vector(resize(unsigned(tmp_252_reg_451),64));
    tmp_315_fu_175_p1 <= tmp_193_i_to_int_fu_171_p1(52 - 1 downto 0);
    tmp_316_fu_185_p1 <= phi_mul_reg_96(15 - 1 downto 0);
    tmp_317_fu_277_p1 <= tmp_192_i_to_int_fu_264_p1(52 - 1 downto 0);
    tmp_318_fu_328_p1 <= p_Val2_s_fu_324_p1(63 - 1 downto 0);
    tmp_319_fu_315_p1 <= y_assign_reg_107(15 - 1 downto 0);
    tmp_i_fu_231_p2 <= std_logic_vector(unsigned(scenario_source_x) - unsigned(x_assign_reg_84));
    uc_address0 <= tmp_253_cast_fu_344_p1(14 - 1 downto 0);

    uc_ce0_assign_proc : process(ap_CS_fsm_state76)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state76))) then 
            uc_ce0 <= ap_const_logic_1;
        else 
            uc_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    uc_d0 <= tmp_130_reg_466;

    uc_we0_assign_proc : process(tmp_182_reg_447, ap_CS_fsm_state76)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state76) and not((ap_const_lv1_0 = tmp_182_reg_447))))) then 
            uc_we0 <= ap_const_logic_1;
        else 
            uc_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity big_mult_v3_94_17_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (77 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (187 downto 0) );
end;


architecture behav of big_mult_v3_94_17_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_5D : STD_LOGIC_VECTOR (6 downto 0) := "1011101";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv94_3FFFFFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (93 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv94_23232C431684455BF0930000 : STD_LOGIC_VECTOR (93 downto 0) := "1000110010001100101100010000110001011010000100010001010101101111110000100100110000000000000000";
    constant ap_const_lv94_3243F6A8885A308D3131 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000110010010000111111011010101000100010000101101000110000100011010011000100110001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_BB : STD_LOGIC_VECTOR (7 downto 0) := "10111011";
    constant ap_const_lv32_BB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111011";
    constant ap_const_lv188_lc_3 : STD_LOGIC_VECTOR (187 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv188_lc_2 : STD_LOGIC_VECTOR (187 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal a_V_cast_fu_221_p1 : STD_LOGIC_VECTOR (93 downto 0);
    signal a_V_cast_reg_838 : STD_LOGIC_VECTOR (93 downto 0);
    signal i_11_fu_231_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_11_reg_852 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_292_fu_267_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_292_reg_857 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond3_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Lo_assign_fu_273_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal Lo_assign_reg_862 : STD_LOGIC_VECTOR (6 downto 0);
    signal Ui_2_fu_289_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal Ui_2_reg_871 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_6_fu_303_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_6_reg_881 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal Lo_assign_1_fu_315_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal Lo_assign_1_reg_886 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond5_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Uj_fu_331_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal Uj_reg_895 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_293_fu_343_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_293_reg_902 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_385_fu_428_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_385_reg_907 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_386_fu_504_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_386_reg_912 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_508_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_192_reg_917 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_1_cast_fu_521_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_cast_reg_922 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond4_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_V_addr_6_reg_935 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal j_7_fu_576_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_7_reg_943 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal or_cond_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_948 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_13_fu_656_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_12_fu_679_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_12_reg_965 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal Li_fu_685_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Li_reg_970 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Hi_assign_fu_705_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Hi_assign_reg_979 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_832_p2 : STD_LOGIC_VECTOR (187 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal pp_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pp_V_ce0 : STD_LOGIC;
    signal pp_V_we0 : STD_LOGIC;
    signal pp_V_q0 : STD_LOGIC_VECTOR (33 downto 0);
    signal pps_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal pps_V_ce0 : STD_LOGIC;
    signal pps_V_we0 : STD_LOGIC;
    signal pps_V_d0 : STD_LOGIC_VECTOR (47 downto 0);
    signal pps_V_q0 : STD_LOGIC_VECTOR (47 downto 0);
    signal i_reg_153 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_164 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_1_reg_175 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_1_reg_187 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_Val2_34_reg_198 : STD_LOGIC_VECTOR (187 downto 0);
    signal i_2_reg_210 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_299_cast_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_186_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_184_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_303_cast_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_194_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_516_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_8_fu_557_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_200_fu_666_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_290_fu_243_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_291_fu_255_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_251_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_263_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_183_fu_283_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_187_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_188_fu_325_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_189_cast_fu_339_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_358_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_360_fu_361_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_362_fu_370_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_359_fu_352_p4 : STD_LOGIC_VECTOR (93 downto 0);
    signal tmp_361_fu_365_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_363_fu_374_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_365_fu_389_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_366_fu_396_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_364_fu_382_p3 : STD_LOGIC_VECTOR (93 downto 0);
    signal tmp_367_fu_402_p1 : STD_LOGIC_VECTOR (93 downto 0);
    signal tmp_368_fu_406_p1 : STD_LOGIC_VECTOR (93 downto 0);
    signal tmp_369_fu_410_p2 : STD_LOGIC_VECTOR (93 downto 0);
    signal tmp_370_fu_416_p2 : STD_LOGIC_VECTOR (93 downto 0);
    signal p_Result_16_fu_422_p2 : STD_LOGIC_VECTOR (93 downto 0);
    signal tmp_372_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_373_fu_436_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_375_fu_445_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_374_fu_440_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_376_fu_449_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_378_fu_465_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_379_fu_472_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_377_fu_457_p3 : STD_LOGIC_VECTOR (93 downto 0);
    signal tmp_380_fu_478_p1 : STD_LOGIC_VECTOR (93 downto 0);
    signal tmp_381_fu_482_p1 : STD_LOGIC_VECTOR (93 downto 0);
    signal tmp_382_fu_486_p2 : STD_LOGIC_VECTOR (93 downto 0);
    signal tmp_383_fu_492_p2 : STD_LOGIC_VECTOR (93 downto 0);
    signal p_Result_17_fu_498_p2 : STD_LOGIC_VECTOR (93 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_185_fu_531_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_fu_547_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_cast3_cast_fu_566_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ult_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_cast3_fu_562_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_196_fu_594_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal rev5_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_197_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_294_fu_615_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_295_fu_627_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_623_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_635_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_296_fu_639_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_198_cast_fu_611_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_297_fu_645_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_199_fu_662_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal Ui_fu_693_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_193_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_387_fu_718_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_388_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_389_fu_730_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_390_fu_735_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_392_fu_747_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_391_fu_741_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_393_fu_754_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_fu_722_p1 : STD_LOGIC_VECTOR (187 downto 0);
    signal tmp_394_fu_760_p1 : STD_LOGIC_VECTOR (187 downto 0);
    signal tmp_397_fu_772_p2 : STD_LOGIC_VECTOR (187 downto 0);
    signal tmp_398_fu_778_p4 : STD_LOGIC_VECTOR (187 downto 0);
    signal tmp_395_fu_764_p1 : STD_LOGIC_VECTOR (187 downto 0);
    signal tmp_396_fu_768_p1 : STD_LOGIC_VECTOR (187 downto 0);
    signal tmp_400_fu_796_p2 : STD_LOGIC_VECTOR (187 downto 0);
    signal tmp_401_fu_802_p2 : STD_LOGIC_VECTOR (187 downto 0);
    signal p_demorgan_fu_808_p2 : STD_LOGIC_VECTOR (187 downto 0);
    signal tmp_402_fu_814_p2 : STD_LOGIC_VECTOR (187 downto 0);
    signal tmp_399_fu_788_p3 : STD_LOGIC_VECTOR (187 downto 0);
    signal tmp_403_fu_820_p2 : STD_LOGIC_VECTOR (187 downto 0);
    signal tmp_404_fu_826_p2 : STD_LOGIC_VECTOR (187 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (187 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component s_compute_acoustig8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (33 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component big_mult_v3_94_17eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (33 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component big_mult_v3_94_17fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (47 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;



begin
    pp_V_U : component big_mult_v3_94_17eOg
    generic map (
        DataWidth => 34,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pp_V_address0,
        ce0 => pp_V_ce0,
        we0 => pp_V_we0,
        d0 => tmp_192_reg_917,
        q0 => pp_V_q0);

    pps_V_U : component big_mult_v3_94_17fYi
    generic map (
        DataWidth => 48,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pps_V_address0,
        ce0 => pps_V_ce0,
        we0 => pps_V_we0,
        d0 => pps_V_d0,
        q0 => pps_V_q0);

    s_compute_acoustig8j_U5 : component s_compute_acoustig8j
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 34,
        din1_WIDTH => 34,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_386_reg_912,
        din1 => tmp_385_reg_907,
        ce => ap_const_logic_1,
        dout => grp_fu_508_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv188_lc_2;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state17) and not((ap_const_lv1_0 = exitcond_fu_673_p2)))) then 
                    ap_return_preg <= p_Val2_34_reg_198;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15) and not((ap_const_lv1_0 = exitcond6_fu_570_p2)))) then 
                i_1_reg_175 <= i_13_fu_656_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
                i_1_reg_175 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    i_2_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_const_lv1_0 = exitcond4_fu_525_p2)))) then 
                i_2_reg_210 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
                i_2_reg_210 <= i_12_reg_965;
            end if; 
        end if;
    end process;

    i_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond5_fu_297_p2)))) then 
                i_reg_153 <= i_11_reg_852;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_153 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_1_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                j_1_reg_187 <= j_7_reg_943;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
                j_1_reg_187 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond3_fu_225_p2 = ap_const_lv1_0))) then 
                j_reg_164 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
                j_reg_164 <= j_6_reg_881;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = exitcond_fu_673_p2))) then
                Hi_assign_reg_979 <= Hi_assign_fu_705_p3;
                Li_reg_970 <= Li_fu_685_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond5_fu_297_p2))) then
                    Lo_assign_1_reg_886(2 downto 0) <= Lo_assign_1_fu_315_p4(2 downto 0);    Lo_assign_1_reg_886(6 downto 4) <= Lo_assign_1_fu_315_p4(6 downto 4);
                Uj_reg_895 <= Uj_fu_331_p3;
                tmp_293_reg_902 <= tmp_293_fu_343_p2;
                tmp_385_reg_907 <= tmp_385_fu_428_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond3_fu_225_p2 = ap_const_lv1_0))) then
                    Lo_assign_reg_862(2 downto 0) <= Lo_assign_fu_273_p4(2 downto 0);    Lo_assign_reg_862(6 downto 4) <= Lo_assign_fu_273_p4(6 downto 4);
                Ui_2_reg_871 <= Ui_2_fu_289_p3;
                    tmp_292_reg_857(6 downto 1) <= tmp_292_fu_267_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                    a_V_cast_reg_838(77 downto 0) <= a_V_cast_fu_221_p1(77 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_11_reg_852 <= i_11_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then
                i_12_reg_965 <= i_12_fu_679_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then
                    i_1_cast_reg_922(3 downto 0) <= i_1_cast_fu_521_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                j_6_reg_881 <= j_6_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                j_7_reg_943 <= j_7_fu_576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_570_p2))) then
                or_cond_reg_948 <= or_cond_fu_605_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state18))) then
                p_Val2_34_reg_198 <= p_Result_s_fu_832_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then
                pps_V_addr_6_reg_935 <= tmp_184_fu_542_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                tmp_192_reg_917 <= grp_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                tmp_386_reg_912 <= tmp_386_fu_504_p1;
            end if;
        end if;
    end process;
    a_V_cast_reg_838(93 downto 78) <= "0000000000000000";
    tmp_292_reg_857(0) <= '0';
    Lo_assign_reg_862(3) <= '0';
    Lo_assign_1_reg_886(3) <= '0';
    i_1_cast_reg_922(4) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond3_fu_225_p2, exitcond5_fu_297_p2, exitcond4_fu_525_p2, exitcond6_fu_570_p2, exitcond_fu_673_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((exitcond3_fu_225_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_297_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_525_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (not((ap_const_lv1_0 = exitcond6_fu_570_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                if (not((ap_const_lv1_0 = exitcond_fu_673_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Hi_assign_fu_705_p3 <= 
        ap_const_lv8_BB when (tmp_193_fu_699_p2(0) = '1') else 
        Ui_fu_693_p2;
    Li_fu_685_p3 <= (i_2_reg_210 & i_2_reg_210);
    Lo_assign_1_fu_315_p4 <= ((j_reg_164 & ap_const_lv1_0) & j_reg_164);
    Lo_assign_fu_273_p4 <= ((i_reg_153 & ap_const_lv1_0) & i_reg_153);
    Ui_2_fu_289_p3 <= 
        ap_const_lv7_5D when (tmp_s_fu_237_p2(0) = '1') else 
        tmp_183_fu_283_p2;
    Ui_fu_693_p2 <= std_logic_vector(unsigned(ap_const_lv8_10) + unsigned(Li_fu_685_p3));
    Uj_fu_331_p3 <= 
        ap_const_lv7_5D when (tmp_187_fu_309_p2(0) = '1') else 
        tmp_188_fu_325_p2;
    a_V_cast_fu_221_p1 <= std_logic_vector(resize(unsigned(a_V),94));
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17, exitcond_fu_673_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state17) and not((ap_const_lv1_0 = exitcond_fu_673_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17, exitcond_fu_673_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17) and not((ap_const_lv1_0 = exitcond_fu_673_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state17, exitcond_fu_673_p2, p_Val2_34_reg_198, ap_return_preg)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17) and not((ap_const_lv1_0 = exitcond_fu_673_p2)))) then 
            ap_return <= p_Val2_34_reg_198;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    exitcond3_fu_225_p2 <= "1" when (i_reg_153 = ap_const_lv3_6) else "0";
    exitcond4_fu_525_p2 <= "1" when (i_1_reg_175 = ap_const_lv4_C) else "0";
    exitcond5_fu_297_p2 <= "1" when (j_reg_164 = ap_const_lv3_6) else "0";
    exitcond6_fu_570_p2 <= "1" when (j_1_reg_187 = ap_const_lv3_6) else "0";
    exitcond_fu_673_p2 <= "1" when (i_2_reg_210 = ap_const_lv4_C) else "0";
    i_11_fu_231_p2 <= std_logic_vector(unsigned(i_reg_153) + unsigned(ap_const_lv3_1));
    i_12_fu_679_p2 <= std_logic_vector(unsigned(i_2_reg_210) + unsigned(ap_const_lv4_1));
    i_13_fu_656_p2 <= std_logic_vector(unsigned(i_1_reg_175) + unsigned(ap_const_lv4_1));
    i_1_cast_fu_521_p1 <= std_logic_vector(resize(unsigned(i_1_reg_175),5));
    j_1_cast3_cast_fu_566_p1 <= std_logic_vector(resize(unsigned(j_1_reg_187),4));
    j_1_cast3_fu_562_p1 <= std_logic_vector(resize(unsigned(j_1_reg_187),5));
    j_6_fu_303_p2 <= std_logic_vector(unsigned(j_reg_164) + unsigned(ap_const_lv3_1));
    j_7_fu_576_p2 <= std_logic_vector(unsigned(j_1_reg_187) + unsigned(ap_const_lv3_1));
    loc_V_fu_722_p1 <= std_logic_vector(resize(unsigned(tmp_387_fu_718_p1),188));
    or_cond_fu_605_p2 <= (rev5_fu_588_p2 and tmp_197_fu_599_p2);
    p_Result_16_fu_422_p2 <= (tmp_369_fu_410_p2 and tmp_370_fu_416_p2);
    p_Result_17_fu_498_p2 <= (tmp_382_fu_486_p2 and tmp_383_fu_492_p2);
    p_Result_s_fu_832_p2 <= (tmp_403_fu_820_p2 or tmp_404_fu_826_p2);
    p_demorgan_fu_808_p2 <= (tmp_400_fu_796_p2 and tmp_401_fu_802_p2);
    p_shl1_cast_fu_263_p1 <= std_logic_vector(resize(unsigned(tmp_291_fu_255_p3),7));
    p_shl2_cast_fu_623_p1 <= std_logic_vector(resize(unsigned(tmp_294_fu_615_p3),7));
    p_shl3_cast_fu_635_p1 <= std_logic_vector(resize(unsigned(tmp_295_fu_627_p3),7));
    p_shl_cast_fu_251_p1 <= std_logic_vector(resize(unsigned(tmp_290_fu_243_p3),7));

    pp_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state11, tmp_299_cast_fu_512_p1, tmp_303_cast_fu_651_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            pp_V_address0 <= tmp_303_cast_fu_651_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            pp_V_address0 <= tmp_299_cast_fu_512_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            pp_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            pp_V_address0 <= "XXXXXX";
        end if; 
    end process;


    pp_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)))) then 
            pp_V_ce0 <= ap_const_logic_1;
        else 
            pp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pp_V_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state11)))) then 
            pp_V_we0 <= ap_const_logic_1;
        else 
            pp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pps_V_address0_assign_proc : process(ap_CS_fsm_state13, pps_V_addr_6_reg_935, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state12, ap_CS_fsm_state16, tmp_186_fu_537_p1, tmp_184_fu_542_p1, tmp_194_fu_713_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            pps_V_address0 <= tmp_194_fu_713_p1(4 - 1 downto 0);
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)))) then 
            pps_V_address0 <= pps_V_addr_6_reg_935;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            pps_V_address0 <= tmp_184_fu_542_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            pps_V_address0 <= tmp_186_fu_537_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            pps_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            pps_V_address0 <= "XXXX";
        end if; 
    end process;


    pps_V_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)))) then 
            pps_V_ce0 <= ap_const_logic_1;
        else 
            pps_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pps_V_d0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state16, tmp_fu_516_p1, r_V_8_fu_557_p1, tmp_200_fu_666_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            pps_V_d0 <= tmp_200_fu_666_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            pps_V_d0 <= r_V_8_fu_557_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            pps_V_d0 <= tmp_fu_516_p1;
        else 
            pps_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pps_V_we0_assign_proc : process(ap_CS_fsm_state14, or_cond_reg_948, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state16) and not((ap_const_lv1_0 = or_cond_reg_948))))) then 
            pps_V_we0 <= ap_const_logic_1;
        else 
            pps_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_8_fu_557_p1 <= std_logic_vector(resize(unsigned(r_V_fu_547_p4),48));
    r_V_fu_547_p4 <= pps_V_q0(47 downto 17);
    rev5_fu_588_p2 <= (ult_fu_582_p2 xor ap_const_lv1_1);
    tmp_183_fu_283_p2 <= std_logic_vector(unsigned(Lo_assign_fu_273_p4) + unsigned(ap_const_lv7_10));
    tmp_184_fu_542_p1 <= std_logic_vector(resize(unsigned(i_1_reg_175),64));
    tmp_185_fu_531_p2 <= std_logic_vector(unsigned(i_1_reg_175) + unsigned(ap_const_lv4_F));
    tmp_186_fu_537_p1 <= std_logic_vector(resize(unsigned(tmp_185_fu_531_p2),64));
    tmp_187_fu_309_p2 <= "1" when (j_reg_164 = ap_const_lv3_5) else "0";
    tmp_188_fu_325_p2 <= std_logic_vector(unsigned(ap_const_lv7_10) + unsigned(Lo_assign_1_fu_315_p4));
    tmp_189_cast_fu_339_p1 <= std_logic_vector(resize(unsigned(j_reg_164),7));
    tmp_193_fu_699_p2 <= "1" when (unsigned(Ui_fu_693_p2) > unsigned(ap_const_lv8_BB)) else "0";
    tmp_194_fu_713_p1 <= std_logic_vector(resize(unsigned(i_2_reg_210),64));
    tmp_196_fu_594_p2 <= std_logic_vector(unsigned(i_1_cast_reg_922) - unsigned(j_1_cast3_fu_562_p1));
    tmp_197_fu_599_p2 <= "1" when (signed(tmp_196_fu_594_p2) < signed(ap_const_lv5_6)) else "0";
        tmp_198_cast_fu_611_p1 <= std_logic_vector(resize(signed(tmp_196_fu_594_p2),7));

    tmp_199_fu_662_p1 <= std_logic_vector(resize(unsigned(pp_V_q0),48));
    tmp_200_fu_666_p2 <= std_logic_vector(unsigned(tmp_199_fu_662_p1) + unsigned(pps_V_q0));
    tmp_290_fu_243_p3 <= (i_reg_153 & ap_const_lv3_0);
    tmp_291_fu_255_p3 <= (i_reg_153 & ap_const_lv1_0);
    tmp_292_fu_267_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_251_p1) - unsigned(p_shl1_cast_fu_263_p1));
    tmp_293_fu_343_p2 <= std_logic_vector(unsigned(tmp_292_reg_857) + unsigned(tmp_189_cast_fu_339_p1));
    tmp_294_fu_615_p3 <= (j_1_reg_187 & ap_const_lv3_0);
    tmp_295_fu_627_p3 <= (j_1_reg_187 & ap_const_lv1_0);
    tmp_296_fu_639_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_623_p1) - unsigned(p_shl3_cast_fu_635_p1));
    tmp_297_fu_645_p2 <= std_logic_vector(unsigned(tmp_296_fu_639_p2) + unsigned(tmp_198_cast_fu_611_p1));
        tmp_299_cast_fu_512_p1 <= std_logic_vector(resize(signed(tmp_293_reg_902),64));

        tmp_303_cast_fu_651_p1 <= std_logic_vector(resize(signed(tmp_297_fu_645_p2),64));

    tmp_358_fu_348_p2 <= "1" when (unsigned(Lo_assign_reg_862) > unsigned(Ui_2_reg_871)) else "0";
    
    tmp_359_fu_352_p4_proc : process(a_V_cast_reg_838)
    variable vlo_cpy : STD_LOGIC_VECTOR(94+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(94+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(94 - 1 downto 0);
    variable tmp_359_fu_352_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(94 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(94 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(94 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5D(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := a_V_cast_reg_838;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(94-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(94-1-unsigned(ap_const_lv32_5D(7-1 downto 0)));
            for tmp_359_fu_352_p4_i in 0 to 94-1 loop
                v0_cpy(tmp_359_fu_352_p4_i) := a_V_cast_reg_838(94-1-tmp_359_fu_352_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(94-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_359_fu_352_p4 <= resvalue(94-1 downto 0);
    end process;

    tmp_360_fu_361_p2 <= std_logic_vector(unsigned(Lo_assign_reg_862) - unsigned(Ui_2_reg_871));
    tmp_361_fu_365_p2 <= std_logic_vector(signed(ap_const_lv7_5D) - signed(Lo_assign_reg_862));
    tmp_362_fu_370_p2 <= std_logic_vector(unsigned(Ui_2_reg_871) - unsigned(Lo_assign_reg_862));
    tmp_363_fu_374_p3 <= 
        tmp_360_fu_361_p2 when (tmp_358_fu_348_p2(0) = '1') else 
        tmp_362_fu_370_p2;
    tmp_364_fu_382_p3 <= 
        tmp_359_fu_352_p4 when (tmp_358_fu_348_p2(0) = '1') else 
        a_V_cast_reg_838;
    tmp_365_fu_389_p3 <= 
        tmp_361_fu_365_p2 when (tmp_358_fu_348_p2(0) = '1') else 
        Lo_assign_reg_862;
    tmp_366_fu_396_p2 <= std_logic_vector(signed(ap_const_lv7_5D) - signed(tmp_363_fu_374_p3));
    tmp_367_fu_402_p1 <= std_logic_vector(resize(unsigned(tmp_365_fu_389_p3),94));
    tmp_368_fu_406_p1 <= std_logic_vector(resize(unsigned(tmp_366_fu_396_p2),94));
    tmp_369_fu_410_p2 <= std_logic_vector(shift_right(unsigned(tmp_364_fu_382_p3),to_integer(unsigned('0' & tmp_367_fu_402_p1(31-1 downto 0)))));
    tmp_370_fu_416_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv94_3FFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_368_fu_406_p1(31-1 downto 0)))));
    tmp_372_fu_432_p2 <= "1" when (unsigned(Lo_assign_1_reg_886) > unsigned(Uj_reg_895)) else "0";
    tmp_373_fu_436_p2 <= std_logic_vector(unsigned(Lo_assign_1_reg_886) - unsigned(Uj_reg_895));
    tmp_374_fu_440_p2 <= std_logic_vector(signed(ap_const_lv7_5D) - signed(Lo_assign_1_reg_886));
    tmp_375_fu_445_p2 <= std_logic_vector(unsigned(Uj_reg_895) - unsigned(Lo_assign_1_reg_886));
    tmp_376_fu_449_p3 <= 
        tmp_373_fu_436_p2 when (tmp_372_fu_432_p2(0) = '1') else 
        tmp_375_fu_445_p2;
    tmp_377_fu_457_p3 <= 
        ap_const_lv94_23232C431684455BF0930000 when (tmp_372_fu_432_p2(0) = '1') else 
        ap_const_lv94_3243F6A8885A308D3131;
    tmp_378_fu_465_p3 <= 
        tmp_374_fu_440_p2 when (tmp_372_fu_432_p2(0) = '1') else 
        Lo_assign_1_reg_886;
    tmp_379_fu_472_p2 <= std_logic_vector(signed(ap_const_lv7_5D) - signed(tmp_376_fu_449_p3));
    tmp_380_fu_478_p1 <= std_logic_vector(resize(unsigned(tmp_378_fu_465_p3),94));
    tmp_381_fu_482_p1 <= std_logic_vector(resize(unsigned(tmp_379_fu_472_p2),94));
    tmp_382_fu_486_p2 <= std_logic_vector(shift_right(unsigned(tmp_377_fu_457_p3),to_integer(unsigned('0' & tmp_380_fu_478_p1(31-1 downto 0)))));
    tmp_383_fu_492_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv94_3FFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_381_fu_482_p1(31-1 downto 0)))));
    tmp_385_fu_428_p1 <= p_Result_16_fu_422_p2(34 - 1 downto 0);
    tmp_386_fu_504_p1 <= p_Result_17_fu_498_p2(34 - 1 downto 0);
    tmp_387_fu_718_p1 <= pps_V_q0(17 - 1 downto 0);
    tmp_388_fu_726_p2 <= "1" when (unsigned(Li_reg_970) > unsigned(Hi_assign_reg_979)) else "0";
    tmp_389_fu_730_p2 <= std_logic_vector(signed(ap_const_lv8_BB) - signed(Li_reg_970));
    tmp_390_fu_735_p3 <= 
        Li_reg_970 when (tmp_388_fu_726_p2(0) = '1') else 
        Hi_assign_reg_979;
    tmp_391_fu_741_p3 <= 
        Hi_assign_reg_979 when (tmp_388_fu_726_p2(0) = '1') else 
        Li_reg_970;
    tmp_392_fu_747_p3 <= 
        tmp_389_fu_730_p2 when (tmp_388_fu_726_p2(0) = '1') else 
        Li_reg_970;
    tmp_393_fu_754_p2 <= std_logic_vector(signed(ap_const_lv8_BB) - signed(tmp_390_fu_735_p3));
    tmp_394_fu_760_p1 <= std_logic_vector(resize(unsigned(tmp_392_fu_747_p3),188));
    tmp_395_fu_764_p1 <= std_logic_vector(resize(unsigned(tmp_391_fu_741_p3),188));
    tmp_396_fu_768_p1 <= std_logic_vector(resize(unsigned(tmp_393_fu_754_p2),188));
    tmp_397_fu_772_p2 <= std_logic_vector(shift_left(unsigned(loc_V_fu_722_p1),to_integer(unsigned('0' & tmp_394_fu_760_p1(31-1 downto 0)))));
    
    tmp_398_fu_778_p4_proc : process(tmp_397_fu_772_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(188+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(188+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(188 - 1 downto 0);
    variable tmp_398_fu_778_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(188 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(188 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(188 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_BB(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := tmp_397_fu_772_p2;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(188-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(188-1-unsigned(ap_const_lv32_BB(8-1 downto 0)));
            for tmp_398_fu_778_p4_i in 0 to 188-1 loop
                v0_cpy(tmp_398_fu_778_p4_i) := tmp_397_fu_772_p2(188-1-tmp_398_fu_778_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(188-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_398_fu_778_p4 <= resvalue(188-1 downto 0);
    end process;

    tmp_399_fu_788_p3 <= 
        tmp_398_fu_778_p4 when (tmp_388_fu_726_p2(0) = '1') else 
        tmp_397_fu_772_p2;
    tmp_400_fu_796_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv188_lc_3),to_integer(unsigned('0' & tmp_395_fu_764_p1(31-1 downto 0)))));
    tmp_401_fu_802_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv188_lc_3),to_integer(unsigned('0' & tmp_396_fu_768_p1(31-1 downto 0)))));
    tmp_402_fu_814_p2 <= (p_demorgan_fu_808_p2 xor ap_const_lv188_lc_3);
    tmp_403_fu_820_p2 <= (p_Val2_34_reg_198 and tmp_402_fu_814_p2);
    tmp_404_fu_826_p2 <= (tmp_399_fu_788_p3 and p_demorgan_fu_808_p2);
    tmp_fu_516_p1 <= std_logic_vector(resize(unsigned(pp_V_q0),48));
    tmp_s_fu_237_p2 <= "1" when (i_reg_153 = ap_const_lv3_5) else "0";
    ult_fu_582_p2 <= "1" when (unsigned(i_1_reg_175) < unsigned(j_1_cast3_cast_fu_566_p1)) else "0";
end behav;

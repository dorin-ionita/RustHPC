-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity big_mult_v3small is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (124 downto 0);
    b_V : IN STD_LOGIC_VECTOR (52 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (177 downto 0) );
end;


architecture behav of big_mult_v3small is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_7C : STD_LOGIC_VECTOR (6 downto 0) := "1111100";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv125_1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (124 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_6F : STD_LOGIC_VECTOR (6 downto 0) := "1101111";
    constant ap_const_lv8_B1 : STD_LOGIC_VECTOR (7 downto 0) := "10110001";
    constant ap_const_lv32_B1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110001";
    constant ap_const_lv178_lc_1 : STD_LOGIC_VECTOR (177 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv178_lc_2 : STD_LOGIC_VECTOR (177 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_209_p1 : STD_LOGIC_VECTOR (69 downto 0);
    signal tmp_reg_591 : STD_LOGIC_VECTOR (69 downto 0);
    signal i_9_fu_219_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_9_reg_599 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Lo_assign_fu_235_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal Lo_assign_reg_604 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Ui_fu_249_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal Ui_reg_613 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_335_fu_337_p1 : STD_LOGIC_VECTOR (69 downto 0);
    signal tmp_335_reg_625 : STD_LOGIC_VECTOR (69 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_176_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_176_reg_633 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal exitcond2_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_10_fu_373_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_10_reg_648 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_181_fu_406_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_181_reg_656 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal exitcond_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_fu_563_p2 : STD_LOGIC_VECTOR (177 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal pp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal pp_V_ce0 : STD_LOGIC;
    signal pp_V_we0 : STD_LOGIC;
    signal pp_V_q0 : STD_LOGIC_VECTOR (69 downto 0);
    signal pps_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal pps_V_ce0 : STD_LOGIC;
    signal pps_V_we0 : STD_LOGIC;
    signal pps_V_d0 : STD_LOGIC_VECTOR (69 downto 0);
    signal pps_V_q0 : STD_LOGIC_VECTOR (69 downto 0);
    signal i_reg_162 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_1_reg_174 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal p_Val2_s_reg_185 : STD_LOGIC_VECTOR (177 downto 0);
    signal i_2_reg_197 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_173_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_178_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_180_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (69 downto 0);
    signal tmp_179_fu_393_p2 : STD_LOGIC_VECTOR (69 downto 0);
    signal tmp_320_fu_231_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_172_fu_243_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_321_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_323_fu_270_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_325_fu_279_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_322_fu_261_p4 : STD_LOGIC_VECTOR (124 downto 0);
    signal tmp_324_fu_274_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_326_fu_283_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_328_fu_298_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_329_fu_305_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_327_fu_291_p3 : STD_LOGIC_VECTOR (124 downto 0);
    signal tmp_330_fu_311_p1 : STD_LOGIC_VECTOR (124 downto 0);
    signal tmp_331_fu_315_p1 : STD_LOGIC_VECTOR (124 downto 0);
    signal tmp_332_fu_319_p2 : STD_LOGIC_VECTOR (124 downto 0);
    signal tmp_333_fu_325_p2 : STD_LOGIC_VECTOR (124 downto 0);
    signal p_Result_15_fu_331_p2 : STD_LOGIC_VECTOR (124 downto 0);
    signal grp_fu_341_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_177_fu_362_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_fu_379_p4 : STD_LOGIC_VECTOR (52 downto 0);
    signal r_V_7_fu_389_p1 : STD_LOGIC_VECTOR (69 downto 0);
    signal Li_fu_417_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_337_fu_433_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal Ui_1_fu_427_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_339_fu_447_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_338_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_340_fu_451_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_341_fu_455_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_342_fu_461_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_344_fu_477_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_343_fu_469_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_345_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_fu_437_p1 : STD_LOGIC_VECTOR (177 downto 0);
    signal tmp_346_fu_491_p1 : STD_LOGIC_VECTOR (177 downto 0);
    signal tmp_349_fu_503_p2 : STD_LOGIC_VECTOR (177 downto 0);
    signal tmp_350_fu_509_p4 : STD_LOGIC_VECTOR (177 downto 0);
    signal tmp_347_fu_495_p1 : STD_LOGIC_VECTOR (177 downto 0);
    signal tmp_348_fu_499_p1 : STD_LOGIC_VECTOR (177 downto 0);
    signal tmp_352_fu_527_p2 : STD_LOGIC_VECTOR (177 downto 0);
    signal tmp_353_fu_533_p2 : STD_LOGIC_VECTOR (177 downto 0);
    signal p_demorgan_fu_539_p2 : STD_LOGIC_VECTOR (177 downto 0);
    signal tmp_354_fu_545_p2 : STD_LOGIC_VECTOR (177 downto 0);
    signal tmp_351_fu_519_p3 : STD_LOGIC_VECTOR (177 downto 0);
    signal tmp_355_fu_551_p2 : STD_LOGIC_VECTOR (177 downto 0);
    signal tmp_356_fu_557_p2 : STD_LOGIC_VECTOR (177 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_336_fu_569_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Result_s_fu_573_p5 : STD_LOGIC_VECTOR (177 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (177 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component s_compute_acoustidEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (52 downto 0);
        din1 : IN STD_LOGIC_VECTOR (69 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (69 downto 0) );
    end component;


    component big_mult_v3small_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (69 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (69 downto 0) );
    end component;



begin
    pp_V_U : component big_mult_v3small_bkb
    generic map (
        DataWidth => 70,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pp_V_address0,
        ce0 => pp_V_ce0,
        we0 => pp_V_we0,
        d0 => grp_fu_341_p2,
        q0 => pp_V_q0);

    pps_V_U : component big_mult_v3small_bkb
    generic map (
        DataWidth => 70,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pps_V_address0,
        ce0 => pps_V_ce0,
        we0 => pps_V_we0,
        d0 => pps_V_d0,
        q0 => pps_V_q0);

    s_compute_acoustidEe_U1 : component s_compute_acoustidEe
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 53,
        din1_WIDTH => 70,
        dout_WIDTH => 70)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_341_p0,
        din1 => tmp_335_reg_625,
        ce => ap_const_logic_1,
        dout => grp_fu_341_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv178_lc_2;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state24))) then 
                    ap_return_preg <= p_Result_s_fu_573_p5;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
                i_1_reg_174 <= i_10_reg_648;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
                i_1_reg_174 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    i_2_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20) and not((ap_const_lv1_0 = exitcond2_fu_351_p2)))) then 
                i_2_reg_197 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
                i_2_reg_197 <= tmp_181_reg_656;
            end if; 
        end if;
    end process;

    i_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_162 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
                i_reg_162 <= i_9_reg_599;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond1_fu_213_p2 = ap_const_lv1_0))) then
                Lo_assign_reg_604 <= Lo_assign_fu_235_p3;
                Ui_reg_613 <= Ui_fu_249_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = exitcond2_fu_351_p2))) then
                i_10_reg_648 <= i_10_fu_373_p2;
                    tmp_176_reg_633(3 downto 0) <= tmp_176_fu_357_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_9_reg_599 <= i_9_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then
                p_Val2_s_reg_185 <= p_Result_14_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then
                tmp_181_reg_656 <= tmp_181_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                tmp_335_reg_625 <= tmp_335_fu_337_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                    tmp_reg_591(52 downto 0) <= tmp_fu_209_p1(52 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_591(69 downto 53) <= "00000000000000000";
    tmp_176_reg_633(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_213_p2, exitcond2_fu_351_p2, exitcond_fu_400_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond1_fu_213_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_351_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state22 => 
                if (not((ap_const_lv1_0 = exitcond_fu_400_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Li_fu_417_p4 <= ((i_2_reg_197 & ap_const_lv1_0) & i_2_reg_197);
    Lo_assign_fu_235_p3 <= (tmp_320_fu_231_p1 & i_reg_162);
    Ui_1_fu_427_p2 <= std_logic_vector(unsigned(ap_const_lv7_10) + unsigned(Li_fu_417_p4));
    Ui_fu_249_p3 <= 
        ap_const_lv7_7C when (tmp_s_fu_225_p2(0) = '1') else 
        tmp_172_fu_243_p2;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22 downto 22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state24)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state24))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state24, p_Result_s_fu_573_p5, ap_return_preg)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state24))) then 
            ap_return <= p_Result_s_fu_573_p5;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    exitcond1_fu_213_p2 <= "1" when (i_reg_162 = ap_const_lv4_8) else "0";
    exitcond2_fu_351_p2 <= "1" when (i_1_reg_174 = ap_const_lv4_8) else "0";
    exitcond_fu_400_p2 <= "1" when (i_2_reg_197 = ap_const_lv3_7) else "0";
    grp_fu_341_p0 <= tmp_reg_591(53 - 1 downto 0);
    i_10_fu_373_p2 <= std_logic_vector(unsigned(i_1_reg_174) + unsigned(ap_const_lv4_1));
    i_9_fu_219_p2 <= std_logic_vector(unsigned(i_reg_162) + unsigned(ap_const_lv4_1));
    loc_V_fu_437_p1 <= std_logic_vector(resize(unsigned(tmp_337_fu_433_p1),178));
    p_Result_14_fu_563_p2 <= (tmp_355_fu_551_p2 or tmp_356_fu_557_p2);
    p_Result_15_fu_331_p2 <= (tmp_332_fu_319_p2 and tmp_333_fu_325_p2);
    p_Result_s_fu_573_p5 <= (tmp_336_fu_569_p1 & p_Val2_s_reg_185(118 downto 0));
    p_demorgan_fu_539_p2 <= (tmp_352_fu_527_p2 and tmp_353_fu_533_p2);

    pp_V_address0_assign_proc : process(ap_CS_fsm_state2, tmp_176_fu_357_p1, ap_CS_fsm_state20, ap_CS_fsm_state18, tmp_173_fu_346_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            pp_V_address0 <= tmp_176_fu_357_p1(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            pp_V_address0 <= tmp_173_fu_346_p1(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            pp_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            pp_V_address0 <= "XXX";
        end if; 
    end process;


    pp_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)))) then 
            pp_V_ce0 <= ap_const_logic_1;
        else 
            pp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pp_V_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state18)))) then 
            pp_V_we0 <= ap_const_logic_1;
        else 
            pp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pps_V_address0_assign_proc : process(tmp_176_reg_633, ap_CS_fsm_state20, ap_CS_fsm_state22, exitcond_fu_400_p2, ap_CS_fsm_state19, ap_CS_fsm_state21, tmp_178_fu_368_p1, tmp_180_fu_412_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state22) and not((ap_const_lv1_0 = exitcond_fu_400_p2)))) then 
            pps_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state22) and (ap_const_lv1_0 = exitcond_fu_400_p2))) then 
            pps_V_address0 <= tmp_180_fu_412_p1(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            pps_V_address0 <= tmp_176_reg_633(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            pps_V_address0 <= tmp_178_fu_368_p1(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            pps_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            pps_V_address0 <= "XXX";
        end if; 
    end process;


    pps_V_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, exitcond_fu_400_p2, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state22) and (ap_const_lv1_0 = exitcond_fu_400_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state22) and not((ap_const_lv1_0 = exitcond_fu_400_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state21)))) then 
            pps_V_ce0 <= ap_const_logic_1;
        else 
            pps_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pps_V_d0_assign_proc : process(pp_V_q0, ap_CS_fsm_state19, ap_CS_fsm_state21, tmp_179_fu_393_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            pps_V_d0 <= tmp_179_fu_393_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            pps_V_d0 <= pp_V_q0;
        else 
            pps_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pps_V_we0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state21)))) then 
            pps_V_we0 <= ap_const_logic_1;
        else 
            pps_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_7_fu_389_p1 <= std_logic_vector(resize(unsigned(r_V_fu_379_p4),70));
    r_V_fu_379_p4 <= pps_V_q0(69 downto 17);
    tmp_172_fu_243_p2 <= std_logic_vector(unsigned(ap_const_lv7_10) + unsigned(Lo_assign_fu_235_p3));
    tmp_173_fu_346_p1 <= std_logic_vector(resize(unsigned(i_reg_162),64));
    tmp_176_fu_357_p1 <= std_logic_vector(resize(unsigned(i_1_reg_174),64));
    tmp_177_fu_362_p2 <= std_logic_vector(unsigned(i_1_reg_174) + unsigned(ap_const_lv4_F));
    tmp_178_fu_368_p1 <= std_logic_vector(resize(unsigned(tmp_177_fu_362_p2),64));
    tmp_179_fu_393_p2 <= std_logic_vector(unsigned(pp_V_q0) + unsigned(r_V_7_fu_389_p1));
    tmp_180_fu_412_p1 <= std_logic_vector(resize(unsigned(i_2_reg_197),64));
    tmp_181_fu_406_p2 <= std_logic_vector(unsigned(i_2_reg_197) + unsigned(ap_const_lv3_1));
    tmp_320_fu_231_p1 <= i_reg_162(3 - 1 downto 0);
    tmp_321_fu_257_p2 <= "1" when (unsigned(Lo_assign_reg_604) > unsigned(Ui_reg_613)) else "0";
    
    tmp_322_fu_261_p4_proc : process(a_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(125+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(125+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(125 - 1 downto 0);
    variable tmp_322_fu_261_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(125 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(125 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(125 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7C(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := a_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(125-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(125-1-unsigned(ap_const_lv32_7C(7-1 downto 0)));
            for tmp_322_fu_261_p4_i in 0 to 125-1 loop
                v0_cpy(tmp_322_fu_261_p4_i) := a_V(125-1-tmp_322_fu_261_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(125-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_322_fu_261_p4 <= resvalue(125-1 downto 0);
    end process;

    tmp_323_fu_270_p2 <= std_logic_vector(unsigned(Lo_assign_reg_604) - unsigned(Ui_reg_613));
    tmp_324_fu_274_p2 <= std_logic_vector(signed(ap_const_lv7_7C) - signed(Lo_assign_reg_604));
    tmp_325_fu_279_p2 <= std_logic_vector(unsigned(Ui_reg_613) - unsigned(Lo_assign_reg_604));
    tmp_326_fu_283_p3 <= 
        tmp_323_fu_270_p2 when (tmp_321_fu_257_p2(0) = '1') else 
        tmp_325_fu_279_p2;
    tmp_327_fu_291_p3 <= 
        tmp_322_fu_261_p4 when (tmp_321_fu_257_p2(0) = '1') else 
        a_V;
    tmp_328_fu_298_p3 <= 
        tmp_324_fu_274_p2 when (tmp_321_fu_257_p2(0) = '1') else 
        Lo_assign_reg_604;
    tmp_329_fu_305_p2 <= std_logic_vector(signed(ap_const_lv7_7C) - signed(tmp_326_fu_283_p3));
    tmp_330_fu_311_p1 <= std_logic_vector(resize(unsigned(tmp_328_fu_298_p3),125));
    tmp_331_fu_315_p1 <= std_logic_vector(resize(unsigned(tmp_329_fu_305_p2),125));
    tmp_332_fu_319_p2 <= std_logic_vector(shift_right(unsigned(tmp_327_fu_291_p3),to_integer(unsigned('0' & tmp_330_fu_311_p1(31-1 downto 0)))));
    tmp_333_fu_325_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv125_1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_331_fu_315_p1(31-1 downto 0)))));
    tmp_335_fu_337_p1 <= p_Result_15_fu_331_p2(70 - 1 downto 0);
    tmp_336_fu_569_p1 <= pps_V_q0(59 - 1 downto 0);
    tmp_337_fu_433_p1 <= pps_V_q0(17 - 1 downto 0);
    tmp_338_fu_441_p2 <= "1" when (unsigned(Li_fu_417_p4) > unsigned(ap_const_lv7_6F)) else "0";
    tmp_339_fu_447_p1 <= std_logic_vector(resize(unsigned(Li_fu_417_p4),8));
    tmp_340_fu_451_p1 <= std_logic_vector(resize(unsigned(Ui_1_fu_427_p2),8));
    tmp_341_fu_455_p2 <= std_logic_vector(signed(ap_const_lv8_B1) - signed(tmp_339_fu_447_p1));
    tmp_342_fu_461_p3 <= 
        tmp_339_fu_447_p1 when (tmp_338_fu_441_p2(0) = '1') else 
        tmp_340_fu_451_p1;
    tmp_343_fu_469_p3 <= 
        tmp_340_fu_451_p1 when (tmp_338_fu_441_p2(0) = '1') else 
        tmp_339_fu_447_p1;
    tmp_344_fu_477_p3 <= 
        tmp_341_fu_455_p2 when (tmp_338_fu_441_p2(0) = '1') else 
        tmp_339_fu_447_p1;
    tmp_345_fu_485_p2 <= std_logic_vector(signed(ap_const_lv8_B1) - signed(tmp_342_fu_461_p3));
    tmp_346_fu_491_p1 <= std_logic_vector(resize(unsigned(tmp_344_fu_477_p3),178));
    tmp_347_fu_495_p1 <= std_logic_vector(resize(unsigned(tmp_343_fu_469_p3),178));
    tmp_348_fu_499_p1 <= std_logic_vector(resize(unsigned(tmp_345_fu_485_p2),178));
    tmp_349_fu_503_p2 <= std_logic_vector(shift_left(unsigned(loc_V_fu_437_p1),to_integer(unsigned('0' & tmp_346_fu_491_p1(31-1 downto 0)))));
    
    tmp_350_fu_509_p4_proc : process(tmp_349_fu_503_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(178+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(178+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(178 - 1 downto 0);
    variable tmp_350_fu_509_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(178 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(178 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(178 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_B1(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := tmp_349_fu_503_p2;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(178-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(178-1-unsigned(ap_const_lv32_B1(8-1 downto 0)));
            for tmp_350_fu_509_p4_i in 0 to 178-1 loop
                v0_cpy(tmp_350_fu_509_p4_i) := tmp_349_fu_503_p2(178-1-tmp_350_fu_509_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(178-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_350_fu_509_p4 <= resvalue(178-1 downto 0);
    end process;

    tmp_351_fu_519_p3 <= 
        tmp_350_fu_509_p4 when (tmp_338_fu_441_p2(0) = '1') else 
        tmp_349_fu_503_p2;
    tmp_352_fu_527_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv178_lc_1),to_integer(unsigned('0' & tmp_347_fu_495_p1(31-1 downto 0)))));
    tmp_353_fu_533_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv178_lc_1),to_integer(unsigned('0' & tmp_348_fu_499_p1(31-1 downto 0)))));
    tmp_354_fu_545_p2 <= (p_demorgan_fu_539_p2 xor ap_const_lv178_lc_1);
    tmp_355_fu_551_p2 <= (p_Val2_s_reg_185 and tmp_354_fu_545_p2);
    tmp_356_fu_557_p2 <= (tmp_351_fu_519_p3 and p_demorgan_fu_539_p2);
    tmp_fu_209_p1 <= std_logic_vector(resize(unsigned(b_V),70));
    tmp_s_fu_225_p2 <= "1" when (i_reg_162 = ap_const_lv4_7) else "0";
end behav;

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module big_mult_v3_94_17_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 18'b1;
parameter    ap_ST_fsm_state2 = 18'b10;
parameter    ap_ST_fsm_state3 = 18'b100;
parameter    ap_ST_fsm_state4 = 18'b1000;
parameter    ap_ST_fsm_state5 = 18'b10000;
parameter    ap_ST_fsm_state6 = 18'b100000;
parameter    ap_ST_fsm_state7 = 18'b1000000;
parameter    ap_ST_fsm_state8 = 18'b10000000;
parameter    ap_ST_fsm_state9 = 18'b100000000;
parameter    ap_ST_fsm_state10 = 18'b1000000000;
parameter    ap_ST_fsm_state11 = 18'b10000000000;
parameter    ap_ST_fsm_state12 = 18'b100000000000;
parameter    ap_ST_fsm_state13 = 18'b1000000000000;
parameter    ap_ST_fsm_state14 = 18'b10000000000000;
parameter    ap_ST_fsm_state15 = 18'b100000000000000;
parameter    ap_ST_fsm_state16 = 18'b1000000000000000;
parameter    ap_ST_fsm_state17 = 18'b10000000000000000;
parameter    ap_ST_fsm_state18 = 18'b100000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv3_6 = 3'b110;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv7_10 = 7'b10000;
parameter    ap_const_lv7_5D = 7'b1011101;
parameter    ap_const_lv32_5D = 32'b1011101;
parameter    ap_const_lv94_3FFFFFFFFFFFFFFFFFFFFFFF = 94'b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv94_23232C431684455BF0930000 = 94'b1000110010001100101100010000110001011010000100010001010101101111110000100100110000000000000000;
parameter    ap_const_lv94_3243F6A8885A308D3131 = 94'b110010010000111111011010101000100010000101101000110000100011010011000100110001;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv4_C = 4'b1100;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv5_6 = 5'b110;
parameter    ap_const_lv8_10 = 8'b10000;
parameter    ap_const_lv8_BB = 8'b10111011;
parameter    ap_const_lv32_BB = 32'b10111011;
parameter    ap_const_lv188_lc_3 = 188'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv188_lc_2 = 188'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [77:0] a_V;
output  [187:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[187:0] ap_return;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [93:0] a_V_cast_fu_221_p1;
reg   [93:0] a_V_cast_reg_838;
wire   [2:0] i_11_fu_231_p2;
reg   [2:0] i_11_reg_852;
wire   [0:0] ap_CS_fsm_state2;
wire   [6:0] tmp_292_fu_267_p2;
reg   [6:0] tmp_292_reg_857;
wire   [0:0] exitcond3_fu_225_p2;
wire   [6:0] Lo_assign_fu_273_p4;
reg   [6:0] Lo_assign_reg_862;
wire   [6:0] Ui_2_fu_289_p3;
reg   [6:0] Ui_2_reg_871;
wire   [2:0] j_6_fu_303_p2;
reg   [2:0] j_6_reg_881;
wire   [0:0] ap_CS_fsm_state3;
wire   [6:0] Lo_assign_1_fu_315_p4;
reg   [6:0] Lo_assign_1_reg_886;
wire   [0:0] exitcond5_fu_297_p2;
wire   [6:0] Uj_fu_331_p3;
reg   [6:0] Uj_reg_895;
wire   [6:0] tmp_293_fu_343_p2;
reg   [6:0] tmp_293_reg_902;
wire  signed [33:0] tmp_385_fu_428_p1;
reg  signed [33:0] tmp_385_reg_907;
wire  signed [33:0] tmp_386_fu_504_p1;
reg  signed [33:0] tmp_386_reg_912;
wire   [0:0] ap_CS_fsm_state4;
wire   [33:0] grp_fu_508_p2;
reg   [33:0] tmp_192_reg_917;
wire   [0:0] ap_CS_fsm_state10;
wire   [4:0] i_1_cast_fu_521_p1;
reg   [4:0] i_1_cast_reg_922;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] exitcond4_fu_525_p2;
reg   [3:0] pps_V_addr_6_reg_935;
wire   [0:0] ap_CS_fsm_state14;
wire   [2:0] j_7_fu_576_p2;
reg   [2:0] j_7_reg_943;
wire   [0:0] ap_CS_fsm_state15;
wire   [0:0] or_cond_fu_605_p2;
reg   [0:0] or_cond_reg_948;
wire   [0:0] exitcond6_fu_570_p2;
wire   [3:0] i_13_fu_656_p2;
wire   [3:0] i_12_fu_679_p2;
reg   [3:0] i_12_reg_965;
wire   [0:0] ap_CS_fsm_state17;
wire   [7:0] Li_fu_685_p3;
reg   [7:0] Li_reg_970;
wire   [0:0] exitcond_fu_673_p2;
wire   [7:0] Hi_assign_fu_705_p3;
reg   [7:0] Hi_assign_reg_979;
wire   [187:0] p_Result_s_fu_832_p2;
wire   [0:0] ap_CS_fsm_state18;
reg   [5:0] pp_V_address0;
reg    pp_V_ce0;
reg    pp_V_we0;
wire   [33:0] pp_V_q0;
reg   [3:0] pps_V_address0;
reg    pps_V_ce0;
reg    pps_V_we0;
reg   [47:0] pps_V_d0;
wire   [47:0] pps_V_q0;
reg   [2:0] i_reg_153;
reg   [2:0] j_reg_164;
wire   [0:0] ap_CS_fsm_state11;
reg   [3:0] i_1_reg_175;
wire   [0:0] ap_CS_fsm_state12;
reg   [2:0] j_1_reg_187;
wire   [0:0] ap_CS_fsm_state16;
reg   [187:0] p_Val2_34_reg_198;
reg   [3:0] i_2_reg_210;
wire  signed [63:0] tmp_299_cast_fu_512_p1;
wire   [63:0] tmp_186_fu_537_p1;
wire   [63:0] tmp_184_fu_542_p1;
wire  signed [63:0] tmp_303_cast_fu_651_p1;
wire   [63:0] tmp_194_fu_713_p1;
wire   [47:0] tmp_fu_516_p1;
wire   [47:0] r_V_8_fu_557_p1;
wire   [47:0] tmp_200_fu_666_p2;
wire   [5:0] tmp_290_fu_243_p3;
wire   [3:0] tmp_291_fu_255_p3;
wire   [6:0] p_shl_cast_fu_251_p1;
wire   [6:0] p_shl1_cast_fu_263_p1;
wire   [0:0] tmp_s_fu_237_p2;
wire   [6:0] tmp_183_fu_283_p2;
wire   [0:0] tmp_187_fu_309_p2;
wire   [6:0] tmp_188_fu_325_p2;
wire   [6:0] tmp_189_cast_fu_339_p1;
wire   [0:0] tmp_358_fu_348_p2;
wire   [6:0] tmp_360_fu_361_p2;
wire   [6:0] tmp_362_fu_370_p2;
reg   [93:0] tmp_359_fu_352_p4;
wire   [6:0] tmp_361_fu_365_p2;
wire   [6:0] tmp_363_fu_374_p3;
wire   [6:0] tmp_365_fu_389_p3;
wire   [6:0] tmp_366_fu_396_p2;
wire   [93:0] tmp_364_fu_382_p3;
wire   [93:0] tmp_367_fu_402_p1;
wire   [93:0] tmp_368_fu_406_p1;
wire   [93:0] tmp_369_fu_410_p2;
wire   [93:0] tmp_370_fu_416_p2;
wire   [93:0] p_Result_16_fu_422_p2;
wire   [0:0] tmp_372_fu_432_p2;
wire   [6:0] tmp_373_fu_436_p2;
wire   [6:0] tmp_375_fu_445_p2;
wire   [6:0] tmp_374_fu_440_p2;
wire   [6:0] tmp_376_fu_449_p3;
wire   [6:0] tmp_378_fu_465_p3;
wire   [6:0] tmp_379_fu_472_p2;
wire   [93:0] tmp_377_fu_457_p3;
wire   [93:0] tmp_380_fu_478_p1;
wire   [93:0] tmp_381_fu_482_p1;
wire   [93:0] tmp_382_fu_486_p2;
wire   [93:0] tmp_383_fu_492_p2;
wire   [93:0] p_Result_17_fu_498_p2;
wire   [0:0] ap_CS_fsm_state5;
wire   [3:0] tmp_185_fu_531_p2;
wire   [30:0] r_V_fu_547_p4;
wire   [3:0] j_1_cast3_cast_fu_566_p1;
wire   [0:0] ult_fu_582_p2;
wire   [4:0] j_1_cast3_fu_562_p1;
wire   [4:0] tmp_196_fu_594_p2;
wire   [0:0] rev5_fu_588_p2;
wire   [0:0] tmp_197_fu_599_p2;
wire   [5:0] tmp_294_fu_615_p3;
wire   [3:0] tmp_295_fu_627_p3;
wire   [6:0] p_shl2_cast_fu_623_p1;
wire   [6:0] p_shl3_cast_fu_635_p1;
wire   [6:0] tmp_296_fu_639_p2;
wire  signed [6:0] tmp_198_cast_fu_611_p1;
wire   [6:0] tmp_297_fu_645_p2;
wire   [47:0] tmp_199_fu_662_p1;
wire   [7:0] Ui_fu_693_p2;
wire   [0:0] tmp_193_fu_699_p2;
wire   [16:0] tmp_387_fu_718_p1;
wire   [0:0] tmp_388_fu_726_p2;
wire   [7:0] tmp_389_fu_730_p2;
wire   [7:0] tmp_390_fu_735_p3;
wire   [7:0] tmp_392_fu_747_p3;
wire   [7:0] tmp_391_fu_741_p3;
wire   [7:0] tmp_393_fu_754_p2;
wire   [187:0] loc_V_fu_722_p1;
wire   [187:0] tmp_394_fu_760_p1;
wire   [187:0] tmp_397_fu_772_p2;
reg   [187:0] tmp_398_fu_778_p4;
wire   [187:0] tmp_395_fu_764_p1;
wire   [187:0] tmp_396_fu_768_p1;
wire   [187:0] tmp_400_fu_796_p2;
wire   [187:0] tmp_401_fu_802_p2;
wire   [187:0] p_demorgan_fu_808_p2;
wire   [187:0] tmp_402_fu_814_p2;
wire   [187:0] tmp_399_fu_788_p3;
wire   [187:0] tmp_403_fu_820_p2;
wire   [187:0] tmp_404_fu_826_p2;
reg   [187:0] ap_return_preg;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'b1;
#0 ap_return_preg = 188'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
end

big_mult_v3_94_17eOg #(
    .DataWidth( 34 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
pp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pp_V_address0),
    .ce0(pp_V_ce0),
    .we0(pp_V_we0),
    .d0(tmp_192_reg_917),
    .q0(pp_V_q0)
);

big_mult_v3_94_17fYi #(
    .DataWidth( 48 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
pps_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pps_V_address0),
    .ce0(pps_V_ce0),
    .we0(pps_V_we0),
    .d0(pps_V_d0),
    .q0(pps_V_q0)
);

s_compute_acoustig8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 34 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 34 ))
s_compute_acoustig8j_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_386_reg_912),
    .din1(tmp_385_reg_907),
    .ce(1'b1),
    .dout(grp_fu_508_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv188_lc_2;
    end else begin
        if (((1'b1 == ap_CS_fsm_state17) & ~(1'b0 == exitcond_fu_673_p2))) begin
            ap_return_preg <= p_Val2_34_reg_198;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & ~(1'b0 == exitcond6_fu_570_p2))) begin
        i_1_reg_175 <= i_13_fu_656_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i_1_reg_175 <= ap_const_lv4_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & ~(1'b0 == exitcond4_fu_525_p2))) begin
        i_2_reg_210 <= ap_const_lv4_0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i_2_reg_210 <= i_12_reg_965;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond5_fu_297_p2))) begin
        i_reg_153 <= i_11_reg_852;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_153 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j_1_reg_187 <= j_7_reg_943;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        j_1_reg_187 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_225_p2 == 1'b0))) begin
        j_reg_164 <= ap_const_lv3_0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_164 <= j_6_reg_881;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (1'b0 == exitcond_fu_673_p2))) begin
        Hi_assign_reg_979 <= Hi_assign_fu_705_p3;
        Li_reg_970 <= Li_fu_685_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond5_fu_297_p2))) begin
        Lo_assign_1_reg_886[2 : 0] <= Lo_assign_1_fu_315_p4[2 : 0];
Lo_assign_1_reg_886[6 : 4] <= Lo_assign_1_fu_315_p4[6 : 4];
        Uj_reg_895 <= Uj_fu_331_p3;
        tmp_293_reg_902 <= tmp_293_fu_343_p2;
        tmp_385_reg_907 <= tmp_385_fu_428_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_225_p2 == 1'b0))) begin
        Lo_assign_reg_862[2 : 0] <= Lo_assign_fu_273_p4[2 : 0];
Lo_assign_reg_862[6 : 4] <= Lo_assign_fu_273_p4[6 : 4];
        Ui_2_reg_871 <= Ui_2_fu_289_p3;
        tmp_292_reg_857[6 : 1] <= tmp_292_fu_267_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        a_V_cast_reg_838[77 : 0] <= a_V_cast_fu_221_p1[77 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_11_reg_852 <= i_11_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_12_reg_965 <= i_12_fu_679_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_1_cast_reg_922[3 : 0] <= i_1_cast_fu_521_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_6_reg_881 <= j_6_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_7_reg_943 <= j_7_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == exitcond6_fu_570_p2))) begin
        or_cond_reg_948 <= or_cond_fu_605_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        p_Val2_34_reg_198 <= p_Result_s_fu_832_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        pps_V_addr_6_reg_935 <= tmp_184_fu_542_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_192_reg_917 <= grp_fu_508_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_386_reg_912 <= tmp_386_fu_504_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & ~(1'b0 == exitcond_fu_673_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & ~(1'b0 == exitcond_fu_673_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & ~(1'b0 == exitcond_fu_673_p2))) begin
        ap_return = p_Val2_34_reg_198;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        pp_V_address0 = tmp_303_cast_fu_651_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        pp_V_address0 = tmp_299_cast_fu_512_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pp_V_address0 = ap_const_lv64_0;
    end else begin
        pp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11))) begin
        pp_V_ce0 = 1'b1;
    end else begin
        pp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        pp_V_we0 = 1'b1;
    end else begin
        pp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        pps_V_address0 = tmp_194_fu_713_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16))) begin
        pps_V_address0 = pps_V_addr_6_reg_935;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        pps_V_address0 = tmp_184_fu_542_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        pps_V_address0 = tmp_186_fu_537_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        pps_V_address0 = ap_const_lv64_0;
    end else begin
        pps_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state16))) begin
        pps_V_ce0 = 1'b1;
    end else begin
        pps_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        pps_V_d0 = tmp_200_fu_666_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        pps_V_d0 = r_V_8_fu_557_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        pps_V_d0 = tmp_fu_516_p1;
    end else begin
        pps_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state16) & ~(1'b0 == or_cond_reg_948)))) begin
        pps_V_we0 = 1'b1;
    end else begin
        pps_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((exitcond3_fu_225_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond5_fu_297_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (~(1'b0 == exitcond4_fu_525_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (~(1'b0 == exitcond6_fu_570_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state17 : begin
            if (~(1'b0 == exitcond_fu_673_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_fu_705_p3 = ((tmp_193_fu_699_p2[0:0] === 1'b1) ? ap_const_lv8_BB : Ui_fu_693_p2);

assign Li_fu_685_p3 = {{i_2_reg_210}, {i_2_reg_210}};

assign Lo_assign_1_fu_315_p4 = {{{j_reg_164}, {1'b0}}, {j_reg_164}};

assign Lo_assign_fu_273_p4 = {{{i_reg_153}, {1'b0}}, {i_reg_153}};

assign Ui_2_fu_289_p3 = ((tmp_s_fu_237_p2[0:0] === 1'b1) ? ap_const_lv7_5D : tmp_183_fu_283_p2);

assign Ui_fu_693_p2 = (ap_const_lv8_10 + Li_fu_685_p3);

assign Uj_fu_331_p3 = ((tmp_187_fu_309_p2[0:0] === 1'b1) ? ap_const_lv7_5D : tmp_188_fu_325_p2);

assign a_V_cast_fu_221_p1 = a_V;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign exitcond3_fu_225_p2 = ((i_reg_153 == ap_const_lv3_6) ? 1'b1 : 1'b0);

assign exitcond4_fu_525_p2 = ((i_1_reg_175 == ap_const_lv4_C) ? 1'b1 : 1'b0);

assign exitcond5_fu_297_p2 = ((j_reg_164 == ap_const_lv3_6) ? 1'b1 : 1'b0);

assign exitcond6_fu_570_p2 = ((j_1_reg_187 == ap_const_lv3_6) ? 1'b1 : 1'b0);

assign exitcond_fu_673_p2 = ((i_2_reg_210 == ap_const_lv4_C) ? 1'b1 : 1'b0);

assign i_11_fu_231_p2 = (i_reg_153 + ap_const_lv3_1);

assign i_12_fu_679_p2 = (i_2_reg_210 + ap_const_lv4_1);

assign i_13_fu_656_p2 = (i_1_reg_175 + ap_const_lv4_1);

assign i_1_cast_fu_521_p1 = i_1_reg_175;

assign j_1_cast3_cast_fu_566_p1 = j_1_reg_187;

assign j_1_cast3_fu_562_p1 = j_1_reg_187;

assign j_6_fu_303_p2 = (j_reg_164 + ap_const_lv3_1);

assign j_7_fu_576_p2 = (j_1_reg_187 + ap_const_lv3_1);

assign loc_V_fu_722_p1 = tmp_387_fu_718_p1;

assign or_cond_fu_605_p2 = (rev5_fu_588_p2 & tmp_197_fu_599_p2);

assign p_Result_16_fu_422_p2 = (tmp_369_fu_410_p2 & tmp_370_fu_416_p2);

assign p_Result_17_fu_498_p2 = (tmp_382_fu_486_p2 & tmp_383_fu_492_p2);

assign p_Result_s_fu_832_p2 = (tmp_403_fu_820_p2 | tmp_404_fu_826_p2);

assign p_demorgan_fu_808_p2 = (tmp_400_fu_796_p2 & tmp_401_fu_802_p2);

assign p_shl1_cast_fu_263_p1 = tmp_291_fu_255_p3;

assign p_shl2_cast_fu_623_p1 = tmp_294_fu_615_p3;

assign p_shl3_cast_fu_635_p1 = tmp_295_fu_627_p3;

assign p_shl_cast_fu_251_p1 = tmp_290_fu_243_p3;

assign r_V_8_fu_557_p1 = r_V_fu_547_p4;

assign r_V_fu_547_p4 = {{pps_V_q0[ap_const_lv32_2F : ap_const_lv32_11]}};

assign rev5_fu_588_p2 = (ult_fu_582_p2 ^ 1'b1);

assign tmp_183_fu_283_p2 = (Lo_assign_fu_273_p4 + ap_const_lv7_10);

assign tmp_184_fu_542_p1 = i_1_reg_175;

assign tmp_185_fu_531_p2 = ($signed(i_1_reg_175) + $signed(ap_const_lv4_F));

assign tmp_186_fu_537_p1 = tmp_185_fu_531_p2;

assign tmp_187_fu_309_p2 = ((j_reg_164 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign tmp_188_fu_325_p2 = (ap_const_lv7_10 + Lo_assign_1_fu_315_p4);

assign tmp_189_cast_fu_339_p1 = j_reg_164;

assign tmp_193_fu_699_p2 = ((Ui_fu_693_p2 > ap_const_lv8_BB) ? 1'b1 : 1'b0);

assign tmp_194_fu_713_p1 = i_2_reg_210;

assign tmp_196_fu_594_p2 = (i_1_cast_reg_922 - j_1_cast3_fu_562_p1);

assign tmp_197_fu_599_p2 = (($signed(tmp_196_fu_594_p2) < $signed(5'b110)) ? 1'b1 : 1'b0);

assign tmp_198_cast_fu_611_p1 = $signed(tmp_196_fu_594_p2);

assign tmp_199_fu_662_p1 = pp_V_q0;

assign tmp_200_fu_666_p2 = (tmp_199_fu_662_p1 + pps_V_q0);

assign tmp_290_fu_243_p3 = {{i_reg_153}, {ap_const_lv3_0}};

assign tmp_291_fu_255_p3 = {{i_reg_153}, {1'b0}};

assign tmp_292_fu_267_p2 = (p_shl_cast_fu_251_p1 - p_shl1_cast_fu_263_p1);

assign tmp_293_fu_343_p2 = (tmp_292_reg_857 + tmp_189_cast_fu_339_p1);

assign tmp_294_fu_615_p3 = {{j_1_reg_187}, {ap_const_lv3_0}};

assign tmp_295_fu_627_p3 = {{j_1_reg_187}, {1'b0}};

assign tmp_296_fu_639_p2 = (p_shl2_cast_fu_623_p1 - p_shl3_cast_fu_635_p1);

assign tmp_297_fu_645_p2 = ($signed(tmp_296_fu_639_p2) + $signed(tmp_198_cast_fu_611_p1));

assign tmp_299_cast_fu_512_p1 = $signed(tmp_293_reg_902);

assign tmp_303_cast_fu_651_p1 = $signed(tmp_297_fu_645_p2);

assign tmp_358_fu_348_p2 = ((Lo_assign_reg_862 > Ui_2_reg_871) ? 1'b1 : 1'b0);

integer ap_tvar_int_0;

always @ (a_V_cast_reg_838) begin
    for (ap_tvar_int_0 = 94 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > ap_const_lv32_5D - ap_const_lv32_0) begin
            tmp_359_fu_352_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_359_fu_352_p4[ap_tvar_int_0] = a_V_cast_reg_838[ap_const_lv32_5D - ap_tvar_int_0];
        end
    end
end

assign tmp_360_fu_361_p2 = (Lo_assign_reg_862 - Ui_2_reg_871);

assign tmp_361_fu_365_p2 = ($signed(ap_const_lv7_5D) - $signed(Lo_assign_reg_862));

assign tmp_362_fu_370_p2 = (Ui_2_reg_871 - Lo_assign_reg_862);

assign tmp_363_fu_374_p3 = ((tmp_358_fu_348_p2[0:0] === 1'b1) ? tmp_360_fu_361_p2 : tmp_362_fu_370_p2);

assign tmp_364_fu_382_p3 = ((tmp_358_fu_348_p2[0:0] === 1'b1) ? tmp_359_fu_352_p4 : a_V_cast_reg_838);

assign tmp_365_fu_389_p3 = ((tmp_358_fu_348_p2[0:0] === 1'b1) ? tmp_361_fu_365_p2 : Lo_assign_reg_862);

assign tmp_366_fu_396_p2 = ($signed(ap_const_lv7_5D) - $signed(tmp_363_fu_374_p3));

assign tmp_367_fu_402_p1 = tmp_365_fu_389_p3;

assign tmp_368_fu_406_p1 = tmp_366_fu_396_p2;

assign tmp_369_fu_410_p2 = tmp_364_fu_382_p3 >> tmp_367_fu_402_p1;

assign tmp_370_fu_416_p2 = ap_const_lv94_3FFFFFFFFFFFFFFFFFFFFFFF >> tmp_368_fu_406_p1;

assign tmp_372_fu_432_p2 = ((Lo_assign_1_reg_886 > Uj_reg_895) ? 1'b1 : 1'b0);

assign tmp_373_fu_436_p2 = (Lo_assign_1_reg_886 - Uj_reg_895);

assign tmp_374_fu_440_p2 = ($signed(ap_const_lv7_5D) - $signed(Lo_assign_1_reg_886));

assign tmp_375_fu_445_p2 = (Uj_reg_895 - Lo_assign_1_reg_886);

assign tmp_376_fu_449_p3 = ((tmp_372_fu_432_p2[0:0] === 1'b1) ? tmp_373_fu_436_p2 : tmp_375_fu_445_p2);

assign tmp_377_fu_457_p3 = ((tmp_372_fu_432_p2[0:0] === 1'b1) ? ap_const_lv94_23232C431684455BF0930000 : ap_const_lv94_3243F6A8885A308D3131);

assign tmp_378_fu_465_p3 = ((tmp_372_fu_432_p2[0:0] === 1'b1) ? tmp_374_fu_440_p2 : Lo_assign_1_reg_886);

assign tmp_379_fu_472_p2 = ($signed(ap_const_lv7_5D) - $signed(tmp_376_fu_449_p3));

assign tmp_380_fu_478_p1 = tmp_378_fu_465_p3;

assign tmp_381_fu_482_p1 = tmp_379_fu_472_p2;

assign tmp_382_fu_486_p2 = tmp_377_fu_457_p3 >> tmp_380_fu_478_p1;

assign tmp_383_fu_492_p2 = ap_const_lv94_3FFFFFFFFFFFFFFFFFFFFFFF >> tmp_381_fu_482_p1;

assign tmp_385_fu_428_p1 = p_Result_16_fu_422_p2[33:0];

assign tmp_386_fu_504_p1 = p_Result_17_fu_498_p2[33:0];

assign tmp_387_fu_718_p1 = pps_V_q0[16:0];

assign tmp_388_fu_726_p2 = ((Li_reg_970 > Hi_assign_reg_979) ? 1'b1 : 1'b0);

assign tmp_389_fu_730_p2 = ($signed(ap_const_lv8_BB) - $signed(Li_reg_970));

assign tmp_390_fu_735_p3 = ((tmp_388_fu_726_p2[0:0] === 1'b1) ? Li_reg_970 : Hi_assign_reg_979);

assign tmp_391_fu_741_p3 = ((tmp_388_fu_726_p2[0:0] === 1'b1) ? Hi_assign_reg_979 : Li_reg_970);

assign tmp_392_fu_747_p3 = ((tmp_388_fu_726_p2[0:0] === 1'b1) ? tmp_389_fu_730_p2 : Li_reg_970);

assign tmp_393_fu_754_p2 = ($signed(ap_const_lv8_BB) - $signed(tmp_390_fu_735_p3));

assign tmp_394_fu_760_p1 = tmp_392_fu_747_p3;

assign tmp_395_fu_764_p1 = tmp_391_fu_741_p3;

assign tmp_396_fu_768_p1 = tmp_393_fu_754_p2;

assign tmp_397_fu_772_p2 = loc_V_fu_722_p1 << tmp_394_fu_760_p1;

integer ap_tvar_int_1;

always @ (tmp_397_fu_772_p2) begin
    for (ap_tvar_int_1 = 188 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > ap_const_lv32_BB - ap_const_lv32_0) begin
            tmp_398_fu_778_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_398_fu_778_p4[ap_tvar_int_1] = tmp_397_fu_772_p2[ap_const_lv32_BB - ap_tvar_int_1];
        end
    end
end

assign tmp_399_fu_788_p3 = ((tmp_388_fu_726_p2[0:0] === 1'b1) ? tmp_398_fu_778_p4 : tmp_397_fu_772_p2);

assign tmp_400_fu_796_p2 = ap_const_lv188_lc_3 << tmp_395_fu_764_p1;

assign tmp_401_fu_802_p2 = ap_const_lv188_lc_3 >> tmp_396_fu_768_p1;

assign tmp_402_fu_814_p2 = (p_demorgan_fu_808_p2 ^ ap_const_lv188_lc_3);

assign tmp_403_fu_820_p2 = (p_Val2_34_reg_198 & tmp_402_fu_814_p2);

assign tmp_404_fu_826_p2 = (tmp_399_fu_788_p3 & p_demorgan_fu_808_p2);

assign tmp_fu_516_p1 = pp_V_q0;

assign tmp_s_fu_237_p2 = ((i_reg_153 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign ult_fu_582_p2 = ((i_1_reg_175 < j_1_cast3_cast_fu_566_p1) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    a_V_cast_reg_838[93:78] <= 16'b0000000000000000;
    tmp_292_reg_857[0] <= 1'b0;
    Lo_assign_reg_862[3] <= 1'b0;
    Lo_assign_1_reg_886[3] <= 1'b0;
    i_1_cast_reg_922[4] <= 1'b0;
end

endmodule //big_mult_v3_94_17_s

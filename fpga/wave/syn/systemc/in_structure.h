// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _in_structure_HH_
#define _in_structure_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct in_structure : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > x;
    sc_in< sc_lv<32> > y;
    sc_in< sc_lv<32> > scenario_nr_struct;
    sc_out< sc_lv<7> > scenario_structure_c_address0;
    sc_out< sc_logic > scenario_structure_c_ce0;
    sc_in< sc_lv<32> > scenario_structure_c_q0;
    sc_out< sc_lv<1> > ap_return;


    // Module declarations
    in_structure(sc_module_name name);
    SC_HAS_PROCESS(in_structure);

    ~in_structure();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > tmp_fu_110_p2;
    sc_signal< sc_lv<1> > tmp_reg_216;
    sc_signal< sc_lv<1> > ap_CS_fsm_state2;
    sc_signal< sc_lv<31> > i_8_fu_115_p2;
    sc_signal< sc_lv<31> > i_8_reg_220;
    sc_signal< sc_lv<7> > scenario_structure_c_34_reg_230;
    sc_signal< sc_lv<7> > scenario_structure_c_35_reg_235;
    sc_signal< sc_lv<7> > scenario_structure_c_36_reg_240;
    sc_signal< sc_lv<1> > tmp_160_fu_179_p2;
    sc_signal< sc_lv<1> > tmp_160_reg_245;
    sc_signal< sc_lv<1> > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_161_fu_184_p2;
    sc_signal< sc_lv<1> > tmp_161_reg_249;
    sc_signal< sc_lv<1> > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > tmp_162_fu_189_p2;
    sc_signal< sc_lv<1> > tmp_162_reg_253;
    sc_signal< sc_lv<1> > ap_CS_fsm_state5;
    sc_signal< sc_lv<31> > i_reg_79;
    sc_signal< sc_lv<1> > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > tmp_163_fu_194_p2;
    sc_signal< sc_lv<1> > p_0_phi_fu_94_p4;
    sc_signal< sc_lv<1> > p_0_reg_90;
    sc_signal< sc_lv<64> > tmp_283_fu_129_p1;
    sc_signal< sc_lv<64> > tmp_285_fu_140_p3;
    sc_signal< sc_lv<64> > tmp_287_fu_155_p3;
    sc_signal< sc_lv<64> > tmp_289_fu_170_p3;
    sc_signal< sc_lv<32> > i_cast_fu_106_p1;
    sc_signal< sc_lv<34> > tmp_s_fu_121_p3;
    sc_signal< sc_lv<34> > tmp_284_fu_134_p2;
    sc_signal< sc_lv<34> > tmp_286_fu_149_p2;
    sc_signal< sc_lv<34> > tmp_288_fu_164_p2;
    sc_signal< sc_lv<1> > ap_return_preg;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<34> ap_const_lv34_6;
    static const sc_lv<30> ap_const_lv30_0;
    static const sc_lv<34> ap_const_lv34_1;
    static const sc_lv<34> ap_const_lv34_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_i_8_fu_115_p2();
    void thread_i_cast_fu_106_p1();
    void thread_p_0_phi_fu_94_p4();
    void thread_scenario_structure_c_address0();
    void thread_scenario_structure_c_ce0();
    void thread_tmp_160_fu_179_p2();
    void thread_tmp_161_fu_184_p2();
    void thread_tmp_162_fu_189_p2();
    void thread_tmp_163_fu_194_p2();
    void thread_tmp_283_fu_129_p1();
    void thread_tmp_284_fu_134_p2();
    void thread_tmp_285_fu_140_p3();
    void thread_tmp_286_fu_149_p2();
    void thread_tmp_287_fu_155_p3();
    void thread_tmp_288_fu_164_p2();
    void thread_tmp_289_fu_170_p3();
    void thread_tmp_fu_110_p2();
    void thread_tmp_s_fu_121_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "on_edge.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic on_edge::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic on_edge::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> on_edge::ap_ST_fsm_state1 = "1";
const sc_lv<2> on_edge::ap_ST_fsm_state2 = "10";
const sc_lv<32> on_edge::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> on_edge::ap_const_lv1_1 = "1";
const sc_lv<32> on_edge::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> on_edge::ap_const_lv32_1 = "1";
const sc_lv<3> on_edge::ap_const_lv3_0 = "000";
const sc_lv<3> on_edge::ap_const_lv3_4 = "100";
const sc_lv<3> on_edge::ap_const_lv3_2 = "10";
const sc_lv<3> on_edge::ap_const_lv3_1 = "1";
const sc_lv<3> on_edge::ap_const_lv3_3 = "11";

on_edge::on_edge(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sel_tmp4_fu_191_p2 );
    sensitive << ( sel_tmp1_fu_179_p3 );

    SC_METHOD(thread_or_cond4_fu_112_p2);
    sensitive << ( tmp20_fu_106_p2 );
    sensitive << ( tmp_156_fu_88_p2 );

    SC_METHOD(thread_or_cond5_fu_160_p2);
    sensitive << ( tmp20_reg_204 );
    sensitive << ( tmp_159_reg_209 );

    SC_METHOD(thread_or_cond_fu_50_p2);
    sensitive << ( tmp_fu_38_p2 );
    sensitive << ( tmp_s_fu_44_p2 );

    SC_METHOD(thread_p_s_fu_164_p3);
    sensitive << ( or_cond5_fu_160_p2 );

    SC_METHOD(thread_sel_tmp11_demorgan_fu_154_p2);
    sensitive << ( tmp_153_fu_66_p2 );
    sensitive << ( or_cond_fu_50_p2 );

    SC_METHOD(thread_sel_tmp1_fu_179_p3);
    sensitive << ( sel_tmp11_demorgan_reg_224 );
    sensitive << ( sel_tmp8_fu_172_p3 );

    SC_METHOD(thread_sel_tmp2_fu_136_p2);
    sensitive << ( sel_tmp_fu_130_p2 );
    sensitive << ( or_cond_fu_50_p2 );

    SC_METHOD(thread_sel_tmp3_fu_186_p2);
    sensitive << ( sel_tmp_reg_214 );

    SC_METHOD(thread_sel_tmp4_fu_191_p2);
    sensitive << ( sel_tmp11_demorgan_reg_224 );
    sensitive << ( sel_tmp3_fu_186_p2 );

    SC_METHOD(thread_sel_tmp6_fu_142_p2);
    sensitive << ( tmp_153_fu_66_p2 );
    sensitive << ( sel_tmp2_fu_136_p2 );

    SC_METHOD(thread_sel_tmp7_fu_148_p2);
    sensitive << ( sel_tmp6_fu_142_p2 );
    sensitive << ( or_cond4_fu_112_p2 );

    SC_METHOD(thread_sel_tmp8_fu_172_p3);
    sensitive << ( sel_tmp7_reg_219 );
    sensitive << ( p_s_fu_164_p3 );

    SC_METHOD(thread_sel_tmp_fu_130_p2);
    sensitive << ( tmp22_fu_124_p2 );
    sensitive << ( tmp_155_fu_82_p2 );

    SC_METHOD(thread_tmp20_fu_106_p2);
    sensitive << ( tmp_157_fu_94_p2 );
    sensitive << ( tmp_158_fu_100_p2 );

    SC_METHOD(thread_tmp22_fu_124_p2);
    sensitive << ( tmp_s_fu_44_p2 );
    sensitive << ( tmp_153_fu_66_p2 );

    SC_METHOD(thread_tmp_152_fu_60_p2);
    sensitive << ( nx );

    SC_METHOD(thread_tmp_153_fu_66_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( y );
    sensitive << ( tmp_152_fu_60_p2 );

    SC_METHOD(thread_tmp_154_fu_76_p2);
    sensitive << ( ny );

    SC_METHOD(thread_tmp_155_fu_82_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x );
    sensitive << ( tmp_154_fu_76_p2 );

    SC_METHOD(thread_tmp_156_fu_88_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( y );

    SC_METHOD(thread_tmp_157_fu_94_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x );

    SC_METHOD(thread_tmp_158_fu_100_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x );
    sensitive << ( tmp_154_fu_76_p2 );

    SC_METHOD(thread_tmp_159_fu_118_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( y );
    sensitive << ( tmp_152_fu_60_p2 );

    SC_METHOD(thread_tmp_fu_38_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x );

    SC_METHOD(thread_tmp_s_fu_44_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( y );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "on_edge_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, y, "(port)y");
    sc_trace(mVcdFile, nx, "(port)nx");
    sc_trace(mVcdFile, ny, "(port)ny");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp20_fu_106_p2, "tmp20_fu_106_p2");
    sc_trace(mVcdFile, tmp20_reg_204, "tmp20_reg_204");
    sc_trace(mVcdFile, tmp_159_fu_118_p2, "tmp_159_fu_118_p2");
    sc_trace(mVcdFile, tmp_159_reg_209, "tmp_159_reg_209");
    sc_trace(mVcdFile, sel_tmp_fu_130_p2, "sel_tmp_fu_130_p2");
    sc_trace(mVcdFile, sel_tmp_reg_214, "sel_tmp_reg_214");
    sc_trace(mVcdFile, sel_tmp7_fu_148_p2, "sel_tmp7_fu_148_p2");
    sc_trace(mVcdFile, sel_tmp7_reg_219, "sel_tmp7_reg_219");
    sc_trace(mVcdFile, sel_tmp11_demorgan_fu_154_p2, "sel_tmp11_demorgan_fu_154_p2");
    sc_trace(mVcdFile, sel_tmp11_demorgan_reg_224, "sel_tmp11_demorgan_reg_224");
    sc_trace(mVcdFile, tmp_fu_38_p2, "tmp_fu_38_p2");
    sc_trace(mVcdFile, tmp_s_fu_44_p2, "tmp_s_fu_44_p2");
    sc_trace(mVcdFile, tmp_152_fu_60_p2, "tmp_152_fu_60_p2");
    sc_trace(mVcdFile, tmp_154_fu_76_p2, "tmp_154_fu_76_p2");
    sc_trace(mVcdFile, tmp_157_fu_94_p2, "tmp_157_fu_94_p2");
    sc_trace(mVcdFile, tmp_158_fu_100_p2, "tmp_158_fu_100_p2");
    sc_trace(mVcdFile, tmp_156_fu_88_p2, "tmp_156_fu_88_p2");
    sc_trace(mVcdFile, tmp_153_fu_66_p2, "tmp_153_fu_66_p2");
    sc_trace(mVcdFile, tmp22_fu_124_p2, "tmp22_fu_124_p2");
    sc_trace(mVcdFile, tmp_155_fu_82_p2, "tmp_155_fu_82_p2");
    sc_trace(mVcdFile, or_cond_fu_50_p2, "or_cond_fu_50_p2");
    sc_trace(mVcdFile, sel_tmp2_fu_136_p2, "sel_tmp2_fu_136_p2");
    sc_trace(mVcdFile, sel_tmp6_fu_142_p2, "sel_tmp6_fu_142_p2");
    sc_trace(mVcdFile, or_cond4_fu_112_p2, "or_cond4_fu_112_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, or_cond5_fu_160_p2, "or_cond5_fu_160_p2");
    sc_trace(mVcdFile, p_s_fu_164_p3, "p_s_fu_164_p3");
    sc_trace(mVcdFile, sel_tmp8_fu_172_p3, "sel_tmp8_fu_172_p3");
    sc_trace(mVcdFile, sel_tmp3_fu_186_p2, "sel_tmp3_fu_186_p2");
    sc_trace(mVcdFile, sel_tmp4_fu_191_p2, "sel_tmp4_fu_191_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_179_p3, "sel_tmp1_fu_179_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

on_edge::~on_edge() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void on_edge::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        sel_tmp11_demorgan_reg_224 = sel_tmp11_demorgan_fu_154_p2.read();
        sel_tmp7_reg_219 = sel_tmp7_fu_148_p2.read();
        sel_tmp_reg_214 = sel_tmp_fu_130_p2.read();
        tmp20_reg_204 = tmp20_fu_106_p2.read();
        tmp_159_reg_209 = tmp_159_fu_118_p2.read();
    }
}

void on_edge::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void on_edge::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void on_edge::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void on_edge::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void on_edge::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void on_edge::thread_ap_return() {
    ap_return = (!sel_tmp4_fu_191_p2.read()[0].is_01())? sc_lv<3>(): ((sel_tmp4_fu_191_p2.read()[0].to_bool())? ap_const_lv3_3: sel_tmp1_fu_179_p3.read());
}

void on_edge::thread_or_cond4_fu_112_p2() {
    or_cond4_fu_112_p2 = (tmp20_fu_106_p2.read() | tmp_156_fu_88_p2.read());
}

void on_edge::thread_or_cond5_fu_160_p2() {
    or_cond5_fu_160_p2 = (tmp20_reg_204.read() | tmp_159_reg_209.read());
}

void on_edge::thread_or_cond_fu_50_p2() {
    or_cond_fu_50_p2 = (tmp_fu_38_p2.read() | tmp_s_fu_44_p2.read());
}

void on_edge::thread_p_s_fu_164_p3() {
    p_s_fu_164_p3 = (!or_cond5_fu_160_p2.read()[0].is_01())? sc_lv<3>(): ((or_cond5_fu_160_p2.read()[0].to_bool())? ap_const_lv3_0: ap_const_lv3_4);
}

void on_edge::thread_sel_tmp11_demorgan_fu_154_p2() {
    sel_tmp11_demorgan_fu_154_p2 = (or_cond_fu_50_p2.read() | tmp_153_fu_66_p2.read());
}

void on_edge::thread_sel_tmp1_fu_179_p3() {
    sel_tmp1_fu_179_p3 = (!sel_tmp11_demorgan_reg_224.read()[0].is_01())? sc_lv<3>(): ((sel_tmp11_demorgan_reg_224.read()[0].to_bool())? sel_tmp8_fu_172_p3.read(): ap_const_lv3_1);
}

void on_edge::thread_sel_tmp2_fu_136_p2() {
    sel_tmp2_fu_136_p2 = (or_cond_fu_50_p2.read() & sel_tmp_fu_130_p2.read());
}

void on_edge::thread_sel_tmp3_fu_186_p2() {
    sel_tmp3_fu_186_p2 = (sel_tmp_reg_214.read() ^ ap_const_lv1_1);
}

void on_edge::thread_sel_tmp4_fu_191_p2() {
    sel_tmp4_fu_191_p2 = (sel_tmp11_demorgan_reg_224.read() & sel_tmp3_fu_186_p2.read());
}

void on_edge::thread_sel_tmp6_fu_142_p2() {
    sel_tmp6_fu_142_p2 = (sel_tmp2_fu_136_p2.read() | tmp_153_fu_66_p2.read());
}

void on_edge::thread_sel_tmp7_fu_148_p2() {
    sel_tmp7_fu_148_p2 = (sel_tmp6_fu_142_p2.read() & or_cond4_fu_112_p2.read());
}

void on_edge::thread_sel_tmp8_fu_172_p3() {
    sel_tmp8_fu_172_p3 = (!sel_tmp7_reg_219.read()[0].is_01())? sc_lv<3>(): ((sel_tmp7_reg_219.read()[0].to_bool())? p_s_fu_164_p3.read(): ap_const_lv3_2);
}

void on_edge::thread_sel_tmp_fu_130_p2() {
    sel_tmp_fu_130_p2 = (tmp22_fu_124_p2.read() | tmp_155_fu_82_p2.read());
}

void on_edge::thread_tmp20_fu_106_p2() {
    tmp20_fu_106_p2 = (tmp_157_fu_94_p2.read() | tmp_158_fu_100_p2.read());
}

void on_edge::thread_tmp22_fu_124_p2() {
    tmp22_fu_124_p2 = (tmp_s_fu_44_p2.read() | tmp_153_fu_66_p2.read());
}

void on_edge::thread_tmp_152_fu_60_p2() {
    tmp_152_fu_60_p2 = (!nx.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(nx.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void on_edge::thread_tmp_153_fu_66_p2() {
    tmp_153_fu_66_p2 = (!tmp_152_fu_60_p2.read().is_01() || !y.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_152_fu_60_p2.read() == y.read());
}

void on_edge::thread_tmp_154_fu_76_p2() {
    tmp_154_fu_76_p2 = (!ny.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(ny.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void on_edge::thread_tmp_155_fu_82_p2() {
    tmp_155_fu_82_p2 = (!tmp_154_fu_76_p2.read().is_01() || !x.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_154_fu_76_p2.read() != x.read());
}

void on_edge::thread_tmp_156_fu_88_p2() {
    tmp_156_fu_88_p2 = (!y.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(y.read() != ap_const_lv32_0);
}

void on_edge::thread_tmp_157_fu_94_p2() {
    tmp_157_fu_94_p2 = (!x.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(x.read() == ap_const_lv32_0);
}

void on_edge::thread_tmp_158_fu_100_p2() {
    tmp_158_fu_100_p2 = (!tmp_154_fu_76_p2.read().is_01() || !x.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_154_fu_76_p2.read() == x.read());
}

void on_edge::thread_tmp_159_fu_118_p2() {
    tmp_159_fu_118_p2 = (!tmp_152_fu_60_p2.read().is_01() || !y.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_152_fu_60_p2.read() != y.read());
}

void on_edge::thread_tmp_fu_38_p2() {
    tmp_fu_38_p2 = (!x.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(x.read() != ap_const_lv32_0);
}

void on_edge::thread_tmp_s_fu_44_p2() {
    tmp_s_fu_44_p2 = (!y.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(y.read() == ap_const_lv32_0);
}

void on_edge::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

